
uart21.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000259c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080026a8  080026a8  000126a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002718  08002718  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002718  08002718  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002718  08002718  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002718  08002718  00012718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800271c  0800271c  0001271c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002720  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000070  08002790  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08002790  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006e55  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001303  00000000  00000000  00026eee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000620  00000000  00000000  000281f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005a8  00000000  00000000  00028818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000168fb  00000000  00000000  00028dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007851  00000000  00000000  0003f6bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008006a  00000000  00000000  00046f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c6f76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b88  00000000  00000000  000c6fc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002690 	.word	0x08002690

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002690 	.word	0x08002690

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000160:	f000 fcd6 	bl	8000b10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000164:	f000 f81e 	bl	80001a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000168:	f000 f882 	bl	8000270 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800016c:	f000 f856 	bl	800021c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000170:	2201      	movs	r2, #1
 8000172:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000176:	4809      	ldr	r0, [pc, #36]	; (800019c <main+0x40>)
 8000178:	f000 ffcd 	bl	8001116 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 800017c:	2201      	movs	r2, #1
 800017e:	2108      	movs	r1, #8
 8000180:	4807      	ldr	r0, [pc, #28]	; (80001a0 <main+0x44>)
 8000182:	f000 ffc8 	bl	8001116 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8000186:	2201      	movs	r2, #1
 8000188:	2110      	movs	r1, #16
 800018a:	4805      	ldr	r0, [pc, #20]	; (80001a0 <main+0x44>)
 800018c:	f000 ffc3 	bl	8001116 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8000190:	2201      	movs	r2, #1
 8000192:	2120      	movs	r1, #32
 8000194:	4802      	ldr	r0, [pc, #8]	; (80001a0 <main+0x44>)
 8000196:	f000 ffbe 	bl	8001116 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800019a:	e7fe      	b.n	800019a <main+0x3e>
 800019c:	40010800 	.word	0x40010800
 80001a0:	40010c00 	.word	0x40010c00

080001a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b090      	sub	sp, #64	; 0x40
 80001a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001aa:	f107 0318 	add.w	r3, r7, #24
 80001ae:	2228      	movs	r2, #40	; 0x28
 80001b0:	2100      	movs	r1, #0
 80001b2:	4618      	mov	r0, r3
 80001b4:	f001 fdea 	bl	8001d8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001b8:	1d3b      	adds	r3, r7, #4
 80001ba:	2200      	movs	r2, #0
 80001bc:	601a      	str	r2, [r3, #0]
 80001be:	605a      	str	r2, [r3, #4]
 80001c0:	609a      	str	r2, [r3, #8]
 80001c2:	60da      	str	r2, [r3, #12]
 80001c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001c6:	2302      	movs	r3, #2
 80001c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ca:	2301      	movs	r3, #1
 80001cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001ce:	2310      	movs	r3, #16
 80001d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001d2:	2300      	movs	r3, #0
 80001d4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001d6:	f107 0318 	add.w	r3, r7, #24
 80001da:	4618      	mov	r0, r3
 80001dc:	f000 ffcc 	bl	8001178 <HAL_RCC_OscConfig>
 80001e0:	4603      	mov	r3, r0
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d001      	beq.n	80001ea <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001e6:	f000 fb73 	bl	80008d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ea:	230f      	movs	r3, #15
 80001ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001ee:	2300      	movs	r3, #0
 80001f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001f2:	2300      	movs	r3, #0
 80001f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001f6:	2300      	movs	r3, #0
 80001f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001fa:	2300      	movs	r3, #0
 80001fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001fe:	1d3b      	adds	r3, r7, #4
 8000200:	2100      	movs	r1, #0
 8000202:	4618      	mov	r0, r3
 8000204:	f001 fa3a 	bl	800167c <HAL_RCC_ClockConfig>
 8000208:	4603      	mov	r3, r0
 800020a:	2b00      	cmp	r3, #0
 800020c:	d001      	beq.n	8000212 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800020e:	f000 fb5f 	bl	80008d0 <Error_Handler>
  }
}
 8000212:	bf00      	nop
 8000214:	3740      	adds	r7, #64	; 0x40
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}
	...

0800021c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000220:	4b11      	ldr	r3, [pc, #68]	; (8000268 <MX_USART1_UART_Init+0x4c>)
 8000222:	4a12      	ldr	r2, [pc, #72]	; (800026c <MX_USART1_UART_Init+0x50>)
 8000224:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000226:	4b10      	ldr	r3, [pc, #64]	; (8000268 <MX_USART1_UART_Init+0x4c>)
 8000228:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800022c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800022e:	4b0e      	ldr	r3, [pc, #56]	; (8000268 <MX_USART1_UART_Init+0x4c>)
 8000230:	2200      	movs	r2, #0
 8000232:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000234:	4b0c      	ldr	r3, [pc, #48]	; (8000268 <MX_USART1_UART_Init+0x4c>)
 8000236:	2200      	movs	r2, #0
 8000238:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800023a:	4b0b      	ldr	r3, [pc, #44]	; (8000268 <MX_USART1_UART_Init+0x4c>)
 800023c:	2200      	movs	r2, #0
 800023e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000240:	4b09      	ldr	r3, [pc, #36]	; (8000268 <MX_USART1_UART_Init+0x4c>)
 8000242:	220c      	movs	r2, #12
 8000244:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000246:	4b08      	ldr	r3, [pc, #32]	; (8000268 <MX_USART1_UART_Init+0x4c>)
 8000248:	2200      	movs	r2, #0
 800024a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800024c:	4b06      	ldr	r3, [pc, #24]	; (8000268 <MX_USART1_UART_Init+0x4c>)
 800024e:	2200      	movs	r2, #0
 8000250:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000252:	4805      	ldr	r0, [pc, #20]	; (8000268 <MX_USART1_UART_Init+0x4c>)
 8000254:	f001 fba0 	bl	8001998 <HAL_UART_Init>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d001      	beq.n	8000262 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800025e:	f000 fb37 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000262:	bf00      	nop
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	200000ac 	.word	0x200000ac
 800026c:	40013800 	.word	0x40013800

08000270 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b088      	sub	sp, #32
 8000274:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000276:	f107 0310 	add.w	r3, r7, #16
 800027a:	2200      	movs	r2, #0
 800027c:	601a      	str	r2, [r3, #0]
 800027e:	605a      	str	r2, [r3, #4]
 8000280:	609a      	str	r2, [r3, #8]
 8000282:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000284:	4b32      	ldr	r3, [pc, #200]	; (8000350 <MX_GPIO_Init+0xe0>)
 8000286:	699b      	ldr	r3, [r3, #24]
 8000288:	4a31      	ldr	r2, [pc, #196]	; (8000350 <MX_GPIO_Init+0xe0>)
 800028a:	f043 0320 	orr.w	r3, r3, #32
 800028e:	6193      	str	r3, [r2, #24]
 8000290:	4b2f      	ldr	r3, [pc, #188]	; (8000350 <MX_GPIO_Init+0xe0>)
 8000292:	699b      	ldr	r3, [r3, #24]
 8000294:	f003 0320 	and.w	r3, r3, #32
 8000298:	60fb      	str	r3, [r7, #12]
 800029a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800029c:	4b2c      	ldr	r3, [pc, #176]	; (8000350 <MX_GPIO_Init+0xe0>)
 800029e:	699b      	ldr	r3, [r3, #24]
 80002a0:	4a2b      	ldr	r2, [pc, #172]	; (8000350 <MX_GPIO_Init+0xe0>)
 80002a2:	f043 0304 	orr.w	r3, r3, #4
 80002a6:	6193      	str	r3, [r2, #24]
 80002a8:	4b29      	ldr	r3, [pc, #164]	; (8000350 <MX_GPIO_Init+0xe0>)
 80002aa:	699b      	ldr	r3, [r3, #24]
 80002ac:	f003 0304 	and.w	r3, r3, #4
 80002b0:	60bb      	str	r3, [r7, #8]
 80002b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002b4:	4b26      	ldr	r3, [pc, #152]	; (8000350 <MX_GPIO_Init+0xe0>)
 80002b6:	699b      	ldr	r3, [r3, #24]
 80002b8:	4a25      	ldr	r2, [pc, #148]	; (8000350 <MX_GPIO_Init+0xe0>)
 80002ba:	f043 0308 	orr.w	r3, r3, #8
 80002be:	6193      	str	r3, [r2, #24]
 80002c0:	4b23      	ldr	r3, [pc, #140]	; (8000350 <MX_GPIO_Init+0xe0>)
 80002c2:	699b      	ldr	r3, [r3, #24]
 80002c4:	f003 0308 	and.w	r3, r3, #8
 80002c8:	607b      	str	r3, [r7, #4]
 80002ca:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80002cc:	2200      	movs	r2, #0
 80002ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002d2:	4820      	ldr	r0, [pc, #128]	; (8000354 <MX_GPIO_Init+0xe4>)
 80002d4:	f000 ff1f 	bl	8001116 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80002d8:	2200      	movs	r2, #0
 80002da:	2138      	movs	r1, #56	; 0x38
 80002dc:	481e      	ldr	r0, [pc, #120]	; (8000358 <MX_GPIO_Init+0xe8>)
 80002de:	f000 ff1a 	bl	8001116 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80002e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002e8:	2301      	movs	r3, #1
 80002ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ec:	2300      	movs	r3, #0
 80002ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002f0:	2302      	movs	r3, #2
 80002f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002f4:	f107 0310 	add.w	r3, r7, #16
 80002f8:	4619      	mov	r1, r3
 80002fa:	4816      	ldr	r0, [pc, #88]	; (8000354 <MX_GPIO_Init+0xe4>)
 80002fc:	f000 fd78 	bl	8000df0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000300:	2338      	movs	r3, #56	; 0x38
 8000302:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000304:	2301      	movs	r3, #1
 8000306:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000308:	2300      	movs	r3, #0
 800030a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800030c:	2302      	movs	r3, #2
 800030e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000310:	f107 0310 	add.w	r3, r7, #16
 8000314:	4619      	mov	r1, r3
 8000316:	4810      	ldr	r0, [pc, #64]	; (8000358 <MX_GPIO_Init+0xe8>)
 8000318:	f000 fd6a 	bl	8000df0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800031c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000320:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000322:	4b0e      	ldr	r3, [pc, #56]	; (800035c <MX_GPIO_Init+0xec>)
 8000324:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000326:	2300      	movs	r3, #0
 8000328:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800032a:	f107 0310 	add.w	r3, r7, #16
 800032e:	4619      	mov	r1, r3
 8000330:	4809      	ldr	r0, [pc, #36]	; (8000358 <MX_GPIO_Init+0xe8>)
 8000332:	f000 fd5d 	bl	8000df0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000336:	2200      	movs	r2, #0
 8000338:	2100      	movs	r1, #0
 800033a:	2017      	movs	r0, #23
 800033c:	f000 fd21 	bl	8000d82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000340:	2017      	movs	r0, #23
 8000342:	f000 fd3a 	bl	8000dba <HAL_NVIC_EnableIRQ>

}
 8000346:	bf00      	nop
 8000348:	3720      	adds	r7, #32
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	40021000 	.word	0x40021000
 8000354:	40010800 	.word	0x40010800
 8000358:	40010c00 	.word	0x40010c00
 800035c:	10110000 	.word	0x10110000

08000360 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b092      	sub	sp, #72	; 0x48
 8000364:	af00      	add	r7, sp, #0
 8000366:	4603      	mov	r3, r0
 8000368:	80fb      	strh	r3, [r7, #6]

  currentMillis = HAL_GetTick();
 800036a:	f000 fc29 	bl	8000bc0 <HAL_GetTick>
 800036e:	4603      	mov	r3, r0
 8000370:	4a91      	ldr	r2, [pc, #580]	; (80005b8 <HAL_GPIO_EXTI_Callback+0x258>)
 8000372:	6013      	str	r3, [r2, #0]
  if (currentMillis - previousMillis > 10) {
 8000374:	4b90      	ldr	r3, [pc, #576]	; (80005b8 <HAL_GPIO_EXTI_Callback+0x258>)
 8000376:	681a      	ldr	r2, [r3, #0]
 8000378:	4b90      	ldr	r3, [pc, #576]	; (80005bc <HAL_GPIO_EXTI_Callback+0x25c>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	1ad3      	subs	r3, r2, r3
 800037e:	2b0a      	cmp	r3, #10
 8000380:	f240 828f 	bls.w	80008a2 <HAL_GPIO_EXTI_Callback+0x542>
    /*Configure GPIO pins : PB6 PB7 PB8 PB9 to GPIO_INPUT*/
    GPIO_InitStructPrivate.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000384:	4b8e      	ldr	r3, [pc, #568]	; (80005c0 <HAL_GPIO_EXTI_Callback+0x260>)
 8000386:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 800038a:	601a      	str	r2, [r3, #0]
    GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 800038c:	4b8c      	ldr	r3, [pc, #560]	; (80005c0 <HAL_GPIO_EXTI_Callback+0x260>)
 800038e:	2200      	movs	r2, #0
 8000390:	605a      	str	r2, [r3, #4]
    GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8000392:	4b8b      	ldr	r3, [pc, #556]	; (80005c0 <HAL_GPIO_EXTI_Callback+0x260>)
 8000394:	2200      	movs	r2, #0
 8000396:	609a      	str	r2, [r3, #8]
    GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8000398:	4b89      	ldr	r3, [pc, #548]	; (80005c0 <HAL_GPIO_EXTI_Callback+0x260>)
 800039a:	2202      	movs	r2, #2
 800039c:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructPrivate);
 800039e:	4988      	ldr	r1, [pc, #544]	; (80005c0 <HAL_GPIO_EXTI_Callback+0x260>)
 80003a0:	4888      	ldr	r0, [pc, #544]	; (80005c4 <HAL_GPIO_EXTI_Callback+0x264>)
 80003a2:	f000 fd25 	bl	8000df0 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 80003a6:	2201      	movs	r2, #1
 80003a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003ac:	4886      	ldr	r0, [pc, #536]	; (80005c8 <HAL_GPIO_EXTI_Callback+0x268>)
 80003ae:	f000 feb2 	bl	8001116 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 80003b2:	2200      	movs	r2, #0
 80003b4:	2108      	movs	r1, #8
 80003b6:	4883      	ldr	r0, [pc, #524]	; (80005c4 <HAL_GPIO_EXTI_Callback+0x264>)
 80003b8:	f000 fead 	bl	8001116 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 80003bc:	2200      	movs	r2, #0
 80003be:	2110      	movs	r1, #16
 80003c0:	4880      	ldr	r0, [pc, #512]	; (80005c4 <HAL_GPIO_EXTI_Callback+0x264>)
 80003c2:	f000 fea8 	bl	8001116 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 80003c6:	2200      	movs	r2, #0
 80003c8:	2120      	movs	r1, #32
 80003ca:	487e      	ldr	r0, [pc, #504]	; (80005c4 <HAL_GPIO_EXTI_Callback+0x264>)
 80003cc:	f000 fea3 	bl	8001116 <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_6 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6))
 80003d0:	88fb      	ldrh	r3, [r7, #6]
 80003d2:	2b40      	cmp	r3, #64	; 0x40
 80003d4:	d11b      	bne.n	800040e <HAL_GPIO_EXTI_Callback+0xae>
 80003d6:	2140      	movs	r1, #64	; 0x40
 80003d8:	487a      	ldr	r0, [pc, #488]	; (80005c4 <HAL_GPIO_EXTI_Callback+0x264>)
 80003da:	f000 fe85 	bl	80010e8 <HAL_GPIO_ReadPin>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d014      	beq.n	800040e <HAL_GPIO_EXTI_Callback+0xae>
    {
      char KEYPRESSED[1]="D"; //ASCII value of D
 80003e4:	2344      	movs	r3, #68	; 0x44
 80003e6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
      sprintf(buffer,"KEYPRESSED:%s\n", KEYPRESSED);
 80003ea:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80003ee:	461a      	mov	r2, r3
 80003f0:	4976      	ldr	r1, [pc, #472]	; (80005cc <HAL_GPIO_EXTI_Callback+0x26c>)
 80003f2:	4877      	ldr	r0, [pc, #476]	; (80005d0 <HAL_GPIO_EXTI_Callback+0x270>)
 80003f4:	f001 fcd2 	bl	8001d9c <siprintf>
      HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), 25);
 80003f8:	4875      	ldr	r0, [pc, #468]	; (80005d0 <HAL_GPIO_EXTI_Callback+0x270>)
 80003fa:	f7ff fea7 	bl	800014c <strlen>
 80003fe:	4603      	mov	r3, r0
 8000400:	b29a      	uxth	r2, r3
 8000402:	2319      	movs	r3, #25
 8000404:	4972      	ldr	r1, [pc, #456]	; (80005d0 <HAL_GPIO_EXTI_Callback+0x270>)
 8000406:	4873      	ldr	r0, [pc, #460]	; (80005d4 <HAL_GPIO_EXTI_Callback+0x274>)
 8000408:	f001 fb16 	bl	8001a38 <HAL_UART_Transmit>
    {
 800040c:	e05f      	b.n	80004ce <HAL_GPIO_EXTI_Callback+0x16e>
    }
    else if(GPIO_Pin == GPIO_PIN_7 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7))
 800040e:	88fb      	ldrh	r3, [r7, #6]
 8000410:	2b80      	cmp	r3, #128	; 0x80
 8000412:	d11b      	bne.n	800044c <HAL_GPIO_EXTI_Callback+0xec>
 8000414:	2180      	movs	r1, #128	; 0x80
 8000416:	486b      	ldr	r0, [pc, #428]	; (80005c4 <HAL_GPIO_EXTI_Callback+0x264>)
 8000418:	f000 fe66 	bl	80010e8 <HAL_GPIO_ReadPin>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d014      	beq.n	800044c <HAL_GPIO_EXTI_Callback+0xec>
    {
      char KEYPRESSEDC[1]="C";
 8000422:	2343      	movs	r3, #67	; 0x43
 8000424:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
      sprintf(buffer,"KEYPRESSED:%s\n", KEYPRESSEDC);
 8000428:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800042c:	461a      	mov	r2, r3
 800042e:	4967      	ldr	r1, [pc, #412]	; (80005cc <HAL_GPIO_EXTI_Callback+0x26c>)
 8000430:	4867      	ldr	r0, [pc, #412]	; (80005d0 <HAL_GPIO_EXTI_Callback+0x270>)
 8000432:	f001 fcb3 	bl	8001d9c <siprintf>
      HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), 25);//ASCII value of C
 8000436:	4866      	ldr	r0, [pc, #408]	; (80005d0 <HAL_GPIO_EXTI_Callback+0x270>)
 8000438:	f7ff fe88 	bl	800014c <strlen>
 800043c:	4603      	mov	r3, r0
 800043e:	b29a      	uxth	r2, r3
 8000440:	2319      	movs	r3, #25
 8000442:	4963      	ldr	r1, [pc, #396]	; (80005d0 <HAL_GPIO_EXTI_Callback+0x270>)
 8000444:	4863      	ldr	r0, [pc, #396]	; (80005d4 <HAL_GPIO_EXTI_Callback+0x274>)
 8000446:	f001 faf7 	bl	8001a38 <HAL_UART_Transmit>
    {
 800044a:	e040      	b.n	80004ce <HAL_GPIO_EXTI_Callback+0x16e>
    }
    else if(GPIO_Pin == GPIO_PIN_8 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 800044c:	88fb      	ldrh	r3, [r7, #6]
 800044e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000452:	d11c      	bne.n	800048e <HAL_GPIO_EXTI_Callback+0x12e>
 8000454:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000458:	485a      	ldr	r0, [pc, #360]	; (80005c4 <HAL_GPIO_EXTI_Callback+0x264>)
 800045a:	f000 fe45 	bl	80010e8 <HAL_GPIO_ReadPin>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d014      	beq.n	800048e <HAL_GPIO_EXTI_Callback+0x12e>
    {
      char KEYPRESSEDB[1]="B";
 8000464:	2342      	movs	r3, #66	; 0x42
 8000466:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
      sprintf(buffer,"KEYPRESSED:%s\n", KEYPRESSEDB);
 800046a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800046e:	461a      	mov	r2, r3
 8000470:	4956      	ldr	r1, [pc, #344]	; (80005cc <HAL_GPIO_EXTI_Callback+0x26c>)
 8000472:	4857      	ldr	r0, [pc, #348]	; (80005d0 <HAL_GPIO_EXTI_Callback+0x270>)
 8000474:	f001 fc92 	bl	8001d9c <siprintf>
      HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), 25);//ASCII value of B
 8000478:	4855      	ldr	r0, [pc, #340]	; (80005d0 <HAL_GPIO_EXTI_Callback+0x270>)
 800047a:	f7ff fe67 	bl	800014c <strlen>
 800047e:	4603      	mov	r3, r0
 8000480:	b29a      	uxth	r2, r3
 8000482:	2319      	movs	r3, #25
 8000484:	4952      	ldr	r1, [pc, #328]	; (80005d0 <HAL_GPIO_EXTI_Callback+0x270>)
 8000486:	4853      	ldr	r0, [pc, #332]	; (80005d4 <HAL_GPIO_EXTI_Callback+0x274>)
 8000488:	f001 fad6 	bl	8001a38 <HAL_UART_Transmit>
    {
 800048c:	e01f      	b.n	80004ce <HAL_GPIO_EXTI_Callback+0x16e>
    }
    else if(GPIO_Pin == GPIO_PIN_9 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 800048e:	88fb      	ldrh	r3, [r7, #6]
 8000490:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000494:	d11b      	bne.n	80004ce <HAL_GPIO_EXTI_Callback+0x16e>
 8000496:	f44f 7100 	mov.w	r1, #512	; 0x200
 800049a:	484a      	ldr	r0, [pc, #296]	; (80005c4 <HAL_GPIO_EXTI_Callback+0x264>)
 800049c:	f000 fe24 	bl	80010e8 <HAL_GPIO_ReadPin>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d013      	beq.n	80004ce <HAL_GPIO_EXTI_Callback+0x16e>
    {
      char KEYPRESSEDA[1]="A";
 80004a6:	2341      	movs	r3, #65	; 0x41
 80004a8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
      sprintf(buffer,"KEYPRESSED:%s\n", KEYPRESSEDA);
 80004ac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80004b0:	461a      	mov	r2, r3
 80004b2:	4946      	ldr	r1, [pc, #280]	; (80005cc <HAL_GPIO_EXTI_Callback+0x26c>)
 80004b4:	4846      	ldr	r0, [pc, #280]	; (80005d0 <HAL_GPIO_EXTI_Callback+0x270>)
 80004b6:	f001 fc71 	bl	8001d9c <siprintf>
      HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), 25);//ASCII value of A
 80004ba:	4845      	ldr	r0, [pc, #276]	; (80005d0 <HAL_GPIO_EXTI_Callback+0x270>)
 80004bc:	f7ff fe46 	bl	800014c <strlen>
 80004c0:	4603      	mov	r3, r0
 80004c2:	b29a      	uxth	r2, r3
 80004c4:	2319      	movs	r3, #25
 80004c6:	4942      	ldr	r1, [pc, #264]	; (80005d0 <HAL_GPIO_EXTI_Callback+0x270>)
 80004c8:	4842      	ldr	r0, [pc, #264]	; (80005d4 <HAL_GPIO_EXTI_Callback+0x274>)
 80004ca:	f001 fab5 	bl	8001a38 <HAL_UART_Transmit>
    }

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 80004ce:	2200      	movs	r2, #0
 80004d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004d4:	483c      	ldr	r0, [pc, #240]	; (80005c8 <HAL_GPIO_EXTI_Callback+0x268>)
 80004d6:	f000 fe1e 	bl	8001116 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 80004da:	2201      	movs	r2, #1
 80004dc:	2108      	movs	r1, #8
 80004de:	4839      	ldr	r0, [pc, #228]	; (80005c4 <HAL_GPIO_EXTI_Callback+0x264>)
 80004e0:	f000 fe19 	bl	8001116 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 80004e4:	2200      	movs	r2, #0
 80004e6:	2110      	movs	r1, #16
 80004e8:	4836      	ldr	r0, [pc, #216]	; (80005c4 <HAL_GPIO_EXTI_Callback+0x264>)
 80004ea:	f000 fe14 	bl	8001116 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 80004ee:	2200      	movs	r2, #0
 80004f0:	2120      	movs	r1, #32
 80004f2:	4834      	ldr	r0, [pc, #208]	; (80005c4 <HAL_GPIO_EXTI_Callback+0x264>)
 80004f4:	f000 fe0f 	bl	8001116 <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_6 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6))
 80004f8:	88fb      	ldrh	r3, [r7, #6]
 80004fa:	2b40      	cmp	r3, #64	; 0x40
 80004fc:	d11b      	bne.n	8000536 <HAL_GPIO_EXTI_Callback+0x1d6>
 80004fe:	2140      	movs	r1, #64	; 0x40
 8000500:	4830      	ldr	r0, [pc, #192]	; (80005c4 <HAL_GPIO_EXTI_Callback+0x264>)
 8000502:	f000 fdf1 	bl	80010e8 <HAL_GPIO_ReadPin>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d014      	beq.n	8000536 <HAL_GPIO_EXTI_Callback+0x1d6>
    {
      char KEYPRESSEDP[1]="#";
 800050c:	2323      	movs	r3, #35	; 0x23
 800050e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
      sprintf(buffer,"KEYPRESSED:%s\n", KEYPRESSEDP);
 8000512:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000516:	461a      	mov	r2, r3
 8000518:	492c      	ldr	r1, [pc, #176]	; (80005cc <HAL_GPIO_EXTI_Callback+0x26c>)
 800051a:	482d      	ldr	r0, [pc, #180]	; (80005d0 <HAL_GPIO_EXTI_Callback+0x270>)
 800051c:	f001 fc3e 	bl	8001d9c <siprintf>
      HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), 25);//ASCII value of #
 8000520:	482b      	ldr	r0, [pc, #172]	; (80005d0 <HAL_GPIO_EXTI_Callback+0x270>)
 8000522:	f7ff fe13 	bl	800014c <strlen>
 8000526:	4603      	mov	r3, r0
 8000528:	b29a      	uxth	r2, r3
 800052a:	2319      	movs	r3, #25
 800052c:	4928      	ldr	r1, [pc, #160]	; (80005d0 <HAL_GPIO_EXTI_Callback+0x270>)
 800052e:	4829      	ldr	r0, [pc, #164]	; (80005d4 <HAL_GPIO_EXTI_Callback+0x274>)
 8000530:	f001 fa82 	bl	8001a38 <HAL_UART_Transmit>
    {
 8000534:	e070      	b.n	8000618 <HAL_GPIO_EXTI_Callback+0x2b8>
    }
    else if(GPIO_Pin == GPIO_PIN_7 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7))
 8000536:	88fb      	ldrh	r3, [r7, #6]
 8000538:	2b80      	cmp	r3, #128	; 0x80
 800053a:	d11b      	bne.n	8000574 <HAL_GPIO_EXTI_Callback+0x214>
 800053c:	2180      	movs	r1, #128	; 0x80
 800053e:	4821      	ldr	r0, [pc, #132]	; (80005c4 <HAL_GPIO_EXTI_Callback+0x264>)
 8000540:	f000 fdd2 	bl	80010e8 <HAL_GPIO_ReadPin>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d014      	beq.n	8000574 <HAL_GPIO_EXTI_Callback+0x214>
    {
      char KEYPRESSED9[1]="9";
 800054a:	2339      	movs	r3, #57	; 0x39
 800054c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
      sprintf(buffer,"KEYPRESSED:%s\n", KEYPRESSED9);
 8000550:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000554:	461a      	mov	r2, r3
 8000556:	491d      	ldr	r1, [pc, #116]	; (80005cc <HAL_GPIO_EXTI_Callback+0x26c>)
 8000558:	481d      	ldr	r0, [pc, #116]	; (80005d0 <HAL_GPIO_EXTI_Callback+0x270>)
 800055a:	f001 fc1f 	bl	8001d9c <siprintf>
      HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), 25);//ASCII value of 9
 800055e:	481c      	ldr	r0, [pc, #112]	; (80005d0 <HAL_GPIO_EXTI_Callback+0x270>)
 8000560:	f7ff fdf4 	bl	800014c <strlen>
 8000564:	4603      	mov	r3, r0
 8000566:	b29a      	uxth	r2, r3
 8000568:	2319      	movs	r3, #25
 800056a:	4919      	ldr	r1, [pc, #100]	; (80005d0 <HAL_GPIO_EXTI_Callback+0x270>)
 800056c:	4819      	ldr	r0, [pc, #100]	; (80005d4 <HAL_GPIO_EXTI_Callback+0x274>)
 800056e:	f001 fa63 	bl	8001a38 <HAL_UART_Transmit>
    {
 8000572:	e051      	b.n	8000618 <HAL_GPIO_EXTI_Callback+0x2b8>
    }
    else if(GPIO_Pin == GPIO_PIN_8 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 8000574:	88fb      	ldrh	r3, [r7, #6]
 8000576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800057a:	d12d      	bne.n	80005d8 <HAL_GPIO_EXTI_Callback+0x278>
 800057c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000580:	4810      	ldr	r0, [pc, #64]	; (80005c4 <HAL_GPIO_EXTI_Callback+0x264>)
 8000582:	f000 fdb1 	bl	80010e8 <HAL_GPIO_ReadPin>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d025      	beq.n	80005d8 <HAL_GPIO_EXTI_Callback+0x278>
    {
      char KEYPRESSED6[1]="6";
 800058c:	2336      	movs	r3, #54	; 0x36
 800058e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
      sprintf(buffer,"KEYPRESSED:%s\n", KEYPRESSED6);
 8000592:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000596:	461a      	mov	r2, r3
 8000598:	490c      	ldr	r1, [pc, #48]	; (80005cc <HAL_GPIO_EXTI_Callback+0x26c>)
 800059a:	480d      	ldr	r0, [pc, #52]	; (80005d0 <HAL_GPIO_EXTI_Callback+0x270>)
 800059c:	f001 fbfe 	bl	8001d9c <siprintf>
      HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), 25);//ASCII value of 6
 80005a0:	480b      	ldr	r0, [pc, #44]	; (80005d0 <HAL_GPIO_EXTI_Callback+0x270>)
 80005a2:	f7ff fdd3 	bl	800014c <strlen>
 80005a6:	4603      	mov	r3, r0
 80005a8:	b29a      	uxth	r2, r3
 80005aa:	2319      	movs	r3, #25
 80005ac:	4908      	ldr	r1, [pc, #32]	; (80005d0 <HAL_GPIO_EXTI_Callback+0x270>)
 80005ae:	4809      	ldr	r0, [pc, #36]	; (80005d4 <HAL_GPIO_EXTI_Callback+0x274>)
 80005b0:	f001 fa42 	bl	8001a38 <HAL_UART_Transmit>
    {
 80005b4:	e030      	b.n	8000618 <HAL_GPIO_EXTI_Callback+0x2b8>
 80005b6:	bf00      	nop
 80005b8:	20000108 	.word	0x20000108
 80005bc:	20000104 	.word	0x20000104
 80005c0:	200000f4 	.word	0x200000f4
 80005c4:	40010c00 	.word	0x40010c00
 80005c8:	40010800 	.word	0x40010800
 80005cc:	080026a8 	.word	0x080026a8
 80005d0:	2000008c 	.word	0x2000008c
 80005d4:	200000ac 	.word	0x200000ac
    }
    else if(GPIO_Pin == GPIO_PIN_9 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 80005d8:	88fb      	ldrh	r3, [r7, #6]
 80005da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80005de:	d11b      	bne.n	8000618 <HAL_GPIO_EXTI_Callback+0x2b8>
 80005e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005e4:	48b1      	ldr	r0, [pc, #708]	; (80008ac <HAL_GPIO_EXTI_Callback+0x54c>)
 80005e6:	f000 fd7f 	bl	80010e8 <HAL_GPIO_ReadPin>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d013      	beq.n	8000618 <HAL_GPIO_EXTI_Callback+0x2b8>
    {
      char KEYPRESSED3[1]="3";
 80005f0:	2333      	movs	r3, #51	; 0x33
 80005f2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
      sprintf(buffer,"KEYPRESSED:%s\n", KEYPRESSED3);
 80005f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005fa:	461a      	mov	r2, r3
 80005fc:	49ac      	ldr	r1, [pc, #688]	; (80008b0 <HAL_GPIO_EXTI_Callback+0x550>)
 80005fe:	48ad      	ldr	r0, [pc, #692]	; (80008b4 <HAL_GPIO_EXTI_Callback+0x554>)
 8000600:	f001 fbcc 	bl	8001d9c <siprintf>
      HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), 25);//ASCII value of 3
 8000604:	48ab      	ldr	r0, [pc, #684]	; (80008b4 <HAL_GPIO_EXTI_Callback+0x554>)
 8000606:	f7ff fda1 	bl	800014c <strlen>
 800060a:	4603      	mov	r3, r0
 800060c:	b29a      	uxth	r2, r3
 800060e:	2319      	movs	r3, #25
 8000610:	49a8      	ldr	r1, [pc, #672]	; (80008b4 <HAL_GPIO_EXTI_Callback+0x554>)
 8000612:	48a9      	ldr	r0, [pc, #676]	; (80008b8 <HAL_GPIO_EXTI_Callback+0x558>)
 8000614:	f001 fa10 	bl	8001a38 <HAL_UART_Transmit>
    }

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000618:	2200      	movs	r2, #0
 800061a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800061e:	48a7      	ldr	r0, [pc, #668]	; (80008bc <HAL_GPIO_EXTI_Callback+0x55c>)
 8000620:	f000 fd79 	bl	8001116 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8000624:	2200      	movs	r2, #0
 8000626:	2108      	movs	r1, #8
 8000628:	48a0      	ldr	r0, [pc, #640]	; (80008ac <HAL_GPIO_EXTI_Callback+0x54c>)
 800062a:	f000 fd74 	bl	8001116 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 800062e:	2201      	movs	r2, #1
 8000630:	2110      	movs	r1, #16
 8000632:	489e      	ldr	r0, [pc, #632]	; (80008ac <HAL_GPIO_EXTI_Callback+0x54c>)
 8000634:	f000 fd6f 	bl	8001116 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8000638:	2200      	movs	r2, #0
 800063a:	2120      	movs	r1, #32
 800063c:	489b      	ldr	r0, [pc, #620]	; (80008ac <HAL_GPIO_EXTI_Callback+0x54c>)
 800063e:	f000 fd6a 	bl	8001116 <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_6 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6))
 8000642:	88fb      	ldrh	r3, [r7, #6]
 8000644:	2b40      	cmp	r3, #64	; 0x40
 8000646:	d11b      	bne.n	8000680 <HAL_GPIO_EXTI_Callback+0x320>
 8000648:	2140      	movs	r1, #64	; 0x40
 800064a:	4898      	ldr	r0, [pc, #608]	; (80008ac <HAL_GPIO_EXTI_Callback+0x54c>)
 800064c:	f000 fd4c 	bl	80010e8 <HAL_GPIO_ReadPin>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d014      	beq.n	8000680 <HAL_GPIO_EXTI_Callback+0x320>
    {
      char KEYPRESSED0[1]="0";
 8000656:	2330      	movs	r3, #48	; 0x30
 8000658:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
      sprintf(buffer,"KEYPRESSED:%s\n", KEYPRESSED0);
 800065c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000660:	461a      	mov	r2, r3
 8000662:	4993      	ldr	r1, [pc, #588]	; (80008b0 <HAL_GPIO_EXTI_Callback+0x550>)
 8000664:	4893      	ldr	r0, [pc, #588]	; (80008b4 <HAL_GPIO_EXTI_Callback+0x554>)
 8000666:	f001 fb99 	bl	8001d9c <siprintf>
      HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), 25);//ASCII value of 0
 800066a:	4892      	ldr	r0, [pc, #584]	; (80008b4 <HAL_GPIO_EXTI_Callback+0x554>)
 800066c:	f7ff fd6e 	bl	800014c <strlen>
 8000670:	4603      	mov	r3, r0
 8000672:	b29a      	uxth	r2, r3
 8000674:	2319      	movs	r3, #25
 8000676:	498f      	ldr	r1, [pc, #572]	; (80008b4 <HAL_GPIO_EXTI_Callback+0x554>)
 8000678:	488f      	ldr	r0, [pc, #572]	; (80008b8 <HAL_GPIO_EXTI_Callback+0x558>)
 800067a:	f001 f9dd 	bl	8001a38 <HAL_UART_Transmit>
    {
 800067e:	e05d      	b.n	800073c <HAL_GPIO_EXTI_Callback+0x3dc>
    }
    else if(GPIO_Pin == GPIO_PIN_7 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7))
 8000680:	88fb      	ldrh	r3, [r7, #6]
 8000682:	2b80      	cmp	r3, #128	; 0x80
 8000684:	d11b      	bne.n	80006be <HAL_GPIO_EXTI_Callback+0x35e>
 8000686:	2180      	movs	r1, #128	; 0x80
 8000688:	4888      	ldr	r0, [pc, #544]	; (80008ac <HAL_GPIO_EXTI_Callback+0x54c>)
 800068a:	f000 fd2d 	bl	80010e8 <HAL_GPIO_ReadPin>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d014      	beq.n	80006be <HAL_GPIO_EXTI_Callback+0x35e>
    {
      char KEYPRESSED8[1]="8";
 8000694:	2338      	movs	r3, #56	; 0x38
 8000696:	f887 3020 	strb.w	r3, [r7, #32]
      sprintf(buffer,"KEYPRESSED:%s\n", KEYPRESSED8);
 800069a:	f107 0320 	add.w	r3, r7, #32
 800069e:	461a      	mov	r2, r3
 80006a0:	4983      	ldr	r1, [pc, #524]	; (80008b0 <HAL_GPIO_EXTI_Callback+0x550>)
 80006a2:	4884      	ldr	r0, [pc, #528]	; (80008b4 <HAL_GPIO_EXTI_Callback+0x554>)
 80006a4:	f001 fb7a 	bl	8001d9c <siprintf>
      HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), 25);//ASCII value of 8
 80006a8:	4882      	ldr	r0, [pc, #520]	; (80008b4 <HAL_GPIO_EXTI_Callback+0x554>)
 80006aa:	f7ff fd4f 	bl	800014c <strlen>
 80006ae:	4603      	mov	r3, r0
 80006b0:	b29a      	uxth	r2, r3
 80006b2:	2319      	movs	r3, #25
 80006b4:	497f      	ldr	r1, [pc, #508]	; (80008b4 <HAL_GPIO_EXTI_Callback+0x554>)
 80006b6:	4880      	ldr	r0, [pc, #512]	; (80008b8 <HAL_GPIO_EXTI_Callback+0x558>)
 80006b8:	f001 f9be 	bl	8001a38 <HAL_UART_Transmit>
    {
 80006bc:	e03e      	b.n	800073c <HAL_GPIO_EXTI_Callback+0x3dc>
    }
    else if(GPIO_Pin == GPIO_PIN_8 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 80006be:	88fb      	ldrh	r3, [r7, #6]
 80006c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80006c4:	d11b      	bne.n	80006fe <HAL_GPIO_EXTI_Callback+0x39e>
 80006c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006ca:	4878      	ldr	r0, [pc, #480]	; (80008ac <HAL_GPIO_EXTI_Callback+0x54c>)
 80006cc:	f000 fd0c 	bl	80010e8 <HAL_GPIO_ReadPin>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d013      	beq.n	80006fe <HAL_GPIO_EXTI_Callback+0x39e>
    {
      char KEYPRESSED5[1]="5";
 80006d6:	2335      	movs	r3, #53	; 0x35
 80006d8:	773b      	strb	r3, [r7, #28]
      sprintf(buffer,"KEYPRESSED:%s\n", KEYPRESSED5);
 80006da:	f107 031c 	add.w	r3, r7, #28
 80006de:	461a      	mov	r2, r3
 80006e0:	4973      	ldr	r1, [pc, #460]	; (80008b0 <HAL_GPIO_EXTI_Callback+0x550>)
 80006e2:	4874      	ldr	r0, [pc, #464]	; (80008b4 <HAL_GPIO_EXTI_Callback+0x554>)
 80006e4:	f001 fb5a 	bl	8001d9c <siprintf>
      HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), 25);//ASCII value of 5
 80006e8:	4872      	ldr	r0, [pc, #456]	; (80008b4 <HAL_GPIO_EXTI_Callback+0x554>)
 80006ea:	f7ff fd2f 	bl	800014c <strlen>
 80006ee:	4603      	mov	r3, r0
 80006f0:	b29a      	uxth	r2, r3
 80006f2:	2319      	movs	r3, #25
 80006f4:	496f      	ldr	r1, [pc, #444]	; (80008b4 <HAL_GPIO_EXTI_Callback+0x554>)
 80006f6:	4870      	ldr	r0, [pc, #448]	; (80008b8 <HAL_GPIO_EXTI_Callback+0x558>)
 80006f8:	f001 f99e 	bl	8001a38 <HAL_UART_Transmit>
    {
 80006fc:	e01e      	b.n	800073c <HAL_GPIO_EXTI_Callback+0x3dc>
    }
    else if(GPIO_Pin == GPIO_PIN_9 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 80006fe:	88fb      	ldrh	r3, [r7, #6]
 8000700:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000704:	d11a      	bne.n	800073c <HAL_GPIO_EXTI_Callback+0x3dc>
 8000706:	f44f 7100 	mov.w	r1, #512	; 0x200
 800070a:	4868      	ldr	r0, [pc, #416]	; (80008ac <HAL_GPIO_EXTI_Callback+0x54c>)
 800070c:	f000 fcec 	bl	80010e8 <HAL_GPIO_ReadPin>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d012      	beq.n	800073c <HAL_GPIO_EXTI_Callback+0x3dc>
    {
      char KEYPRESSED2[1]="2";
 8000716:	2332      	movs	r3, #50	; 0x32
 8000718:	763b      	strb	r3, [r7, #24]
      sprintf(buffer,"KEYPRESSED:%s\n", KEYPRESSED2);
 800071a:	f107 0318 	add.w	r3, r7, #24
 800071e:	461a      	mov	r2, r3
 8000720:	4963      	ldr	r1, [pc, #396]	; (80008b0 <HAL_GPIO_EXTI_Callback+0x550>)
 8000722:	4864      	ldr	r0, [pc, #400]	; (80008b4 <HAL_GPIO_EXTI_Callback+0x554>)
 8000724:	f001 fb3a 	bl	8001d9c <siprintf>
      HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), 25);//ASCII value of 2
 8000728:	4862      	ldr	r0, [pc, #392]	; (80008b4 <HAL_GPIO_EXTI_Callback+0x554>)
 800072a:	f7ff fd0f 	bl	800014c <strlen>
 800072e:	4603      	mov	r3, r0
 8000730:	b29a      	uxth	r2, r3
 8000732:	2319      	movs	r3, #25
 8000734:	495f      	ldr	r1, [pc, #380]	; (80008b4 <HAL_GPIO_EXTI_Callback+0x554>)
 8000736:	4860      	ldr	r0, [pc, #384]	; (80008b8 <HAL_GPIO_EXTI_Callback+0x558>)
 8000738:	f001 f97e 	bl	8001a38 <HAL_UART_Transmit>
    }

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 800073c:	2200      	movs	r2, #0
 800073e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000742:	485e      	ldr	r0, [pc, #376]	; (80008bc <HAL_GPIO_EXTI_Callback+0x55c>)
 8000744:	f000 fce7 	bl	8001116 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8000748:	2200      	movs	r2, #0
 800074a:	2108      	movs	r1, #8
 800074c:	4857      	ldr	r0, [pc, #348]	; (80008ac <HAL_GPIO_EXTI_Callback+0x54c>)
 800074e:	f000 fce2 	bl	8001116 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8000752:	2200      	movs	r2, #0
 8000754:	2110      	movs	r1, #16
 8000756:	4855      	ldr	r0, [pc, #340]	; (80008ac <HAL_GPIO_EXTI_Callback+0x54c>)
 8000758:	f000 fcdd 	bl	8001116 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 800075c:	2201      	movs	r2, #1
 800075e:	2120      	movs	r1, #32
 8000760:	4852      	ldr	r0, [pc, #328]	; (80008ac <HAL_GPIO_EXTI_Callback+0x54c>)
 8000762:	f000 fcd8 	bl	8001116 <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_6 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6))
 8000766:	88fb      	ldrh	r3, [r7, #6]
 8000768:	2b40      	cmp	r3, #64	; 0x40
 800076a:	d11a      	bne.n	80007a2 <HAL_GPIO_EXTI_Callback+0x442>
 800076c:	2140      	movs	r1, #64	; 0x40
 800076e:	484f      	ldr	r0, [pc, #316]	; (80008ac <HAL_GPIO_EXTI_Callback+0x54c>)
 8000770:	f000 fcba 	bl	80010e8 <HAL_GPIO_ReadPin>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d013      	beq.n	80007a2 <HAL_GPIO_EXTI_Callback+0x442>
    {
      char KEYPRESSEDQ[1] = "*";
 800077a:	232a      	movs	r3, #42	; 0x2a
 800077c:	753b      	strb	r3, [r7, #20]
      sprintf(buffer,"KEYPRESSED:%s\n", KEYPRESSEDQ);
 800077e:	f107 0314 	add.w	r3, r7, #20
 8000782:	461a      	mov	r2, r3
 8000784:	494a      	ldr	r1, [pc, #296]	; (80008b0 <HAL_GPIO_EXTI_Callback+0x550>)
 8000786:	484b      	ldr	r0, [pc, #300]	; (80008b4 <HAL_GPIO_EXTI_Callback+0x554>)
 8000788:	f001 fb08 	bl	8001d9c <siprintf>
      HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), 25);//ASCII value of *
 800078c:	4849      	ldr	r0, [pc, #292]	; (80008b4 <HAL_GPIO_EXTI_Callback+0x554>)
 800078e:	f7ff fcdd 	bl	800014c <strlen>
 8000792:	4603      	mov	r3, r0
 8000794:	b29a      	uxth	r2, r3
 8000796:	2319      	movs	r3, #25
 8000798:	4946      	ldr	r1, [pc, #280]	; (80008b4 <HAL_GPIO_EXTI_Callback+0x554>)
 800079a:	4847      	ldr	r0, [pc, #284]	; (80008b8 <HAL_GPIO_EXTI_Callback+0x558>)
 800079c:	f001 f94c 	bl	8001a38 <HAL_UART_Transmit>
    {
 80007a0:	e05c      	b.n	800085c <HAL_GPIO_EXTI_Callback+0x4fc>
    }
    else if(GPIO_Pin == GPIO_PIN_7 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7))
 80007a2:	88fb      	ldrh	r3, [r7, #6]
 80007a4:	2b80      	cmp	r3, #128	; 0x80
 80007a6:	d11a      	bne.n	80007de <HAL_GPIO_EXTI_Callback+0x47e>
 80007a8:	2180      	movs	r1, #128	; 0x80
 80007aa:	4840      	ldr	r0, [pc, #256]	; (80008ac <HAL_GPIO_EXTI_Callback+0x54c>)
 80007ac:	f000 fc9c 	bl	80010e8 <HAL_GPIO_ReadPin>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d013      	beq.n	80007de <HAL_GPIO_EXTI_Callback+0x47e>
    {
      char KEYPRESSED7[1] = "7";
 80007b6:	2337      	movs	r3, #55	; 0x37
 80007b8:	743b      	strb	r3, [r7, #16]
      sprintf(buffer,"KEYPRESSED:%s\n", KEYPRESSED7);
 80007ba:	f107 0310 	add.w	r3, r7, #16
 80007be:	461a      	mov	r2, r3
 80007c0:	493b      	ldr	r1, [pc, #236]	; (80008b0 <HAL_GPIO_EXTI_Callback+0x550>)
 80007c2:	483c      	ldr	r0, [pc, #240]	; (80008b4 <HAL_GPIO_EXTI_Callback+0x554>)
 80007c4:	f001 faea 	bl	8001d9c <siprintf>
      HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), 25);//ASCII value of 7
 80007c8:	483a      	ldr	r0, [pc, #232]	; (80008b4 <HAL_GPIO_EXTI_Callback+0x554>)
 80007ca:	f7ff fcbf 	bl	800014c <strlen>
 80007ce:	4603      	mov	r3, r0
 80007d0:	b29a      	uxth	r2, r3
 80007d2:	2319      	movs	r3, #25
 80007d4:	4937      	ldr	r1, [pc, #220]	; (80008b4 <HAL_GPIO_EXTI_Callback+0x554>)
 80007d6:	4838      	ldr	r0, [pc, #224]	; (80008b8 <HAL_GPIO_EXTI_Callback+0x558>)
 80007d8:	f001 f92e 	bl	8001a38 <HAL_UART_Transmit>
    {
 80007dc:	e03e      	b.n	800085c <HAL_GPIO_EXTI_Callback+0x4fc>
    }
    else if(GPIO_Pin == GPIO_PIN_8 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 80007de:	88fb      	ldrh	r3, [r7, #6]
 80007e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80007e4:	d11b      	bne.n	800081e <HAL_GPIO_EXTI_Callback+0x4be>
 80007e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007ea:	4830      	ldr	r0, [pc, #192]	; (80008ac <HAL_GPIO_EXTI_Callback+0x54c>)
 80007ec:	f000 fc7c 	bl	80010e8 <HAL_GPIO_ReadPin>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d013      	beq.n	800081e <HAL_GPIO_EXTI_Callback+0x4be>
    {
      char KEYPRESSED4[1] = "4";
 80007f6:	2334      	movs	r3, #52	; 0x34
 80007f8:	733b      	strb	r3, [r7, #12]
      sprintf(buffer,"KEYPRESSED:%s\n", KEYPRESSED4);
 80007fa:	f107 030c 	add.w	r3, r7, #12
 80007fe:	461a      	mov	r2, r3
 8000800:	492b      	ldr	r1, [pc, #172]	; (80008b0 <HAL_GPIO_EXTI_Callback+0x550>)
 8000802:	482c      	ldr	r0, [pc, #176]	; (80008b4 <HAL_GPIO_EXTI_Callback+0x554>)
 8000804:	f001 faca 	bl	8001d9c <siprintf>
      HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), 25);//ASCII value of 4
 8000808:	482a      	ldr	r0, [pc, #168]	; (80008b4 <HAL_GPIO_EXTI_Callback+0x554>)
 800080a:	f7ff fc9f 	bl	800014c <strlen>
 800080e:	4603      	mov	r3, r0
 8000810:	b29a      	uxth	r2, r3
 8000812:	2319      	movs	r3, #25
 8000814:	4927      	ldr	r1, [pc, #156]	; (80008b4 <HAL_GPIO_EXTI_Callback+0x554>)
 8000816:	4828      	ldr	r0, [pc, #160]	; (80008b8 <HAL_GPIO_EXTI_Callback+0x558>)
 8000818:	f001 f90e 	bl	8001a38 <HAL_UART_Transmit>
    {
 800081c:	e01e      	b.n	800085c <HAL_GPIO_EXTI_Callback+0x4fc>
    }
    else if(GPIO_Pin == GPIO_PIN_9 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 800081e:	88fb      	ldrh	r3, [r7, #6]
 8000820:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000824:	d11a      	bne.n	800085c <HAL_GPIO_EXTI_Callback+0x4fc>
 8000826:	f44f 7100 	mov.w	r1, #512	; 0x200
 800082a:	4820      	ldr	r0, [pc, #128]	; (80008ac <HAL_GPIO_EXTI_Callback+0x54c>)
 800082c:	f000 fc5c 	bl	80010e8 <HAL_GPIO_ReadPin>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d012      	beq.n	800085c <HAL_GPIO_EXTI_Callback+0x4fc>
    {
      char KEYPRESSED1[1] = "1";
 8000836:	2331      	movs	r3, #49	; 0x31
 8000838:	723b      	strb	r3, [r7, #8]
      sprintf(buffer,"KEYPRESSED:%s\n", KEYPRESSED1);
 800083a:	f107 0308 	add.w	r3, r7, #8
 800083e:	461a      	mov	r2, r3
 8000840:	491b      	ldr	r1, [pc, #108]	; (80008b0 <HAL_GPIO_EXTI_Callback+0x550>)
 8000842:	481c      	ldr	r0, [pc, #112]	; (80008b4 <HAL_GPIO_EXTI_Callback+0x554>)
 8000844:	f001 faaa 	bl	8001d9c <siprintf>
      HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), 25);//ASCII value of 1
 8000848:	481a      	ldr	r0, [pc, #104]	; (80008b4 <HAL_GPIO_EXTI_Callback+0x554>)
 800084a:	f7ff fc7f 	bl	800014c <strlen>
 800084e:	4603      	mov	r3, r0
 8000850:	b29a      	uxth	r2, r3
 8000852:	2319      	movs	r3, #25
 8000854:	4917      	ldr	r1, [pc, #92]	; (80008b4 <HAL_GPIO_EXTI_Callback+0x554>)
 8000856:	4818      	ldr	r0, [pc, #96]	; (80008b8 <HAL_GPIO_EXTI_Callback+0x558>)
 8000858:	f001 f8ee 	bl	8001a38 <HAL_UART_Transmit>
    }

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 800085c:	2201      	movs	r2, #1
 800085e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000862:	4816      	ldr	r0, [pc, #88]	; (80008bc <HAL_GPIO_EXTI_Callback+0x55c>)
 8000864:	f000 fc57 	bl	8001116 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8000868:	2201      	movs	r2, #1
 800086a:	2108      	movs	r1, #8
 800086c:	480f      	ldr	r0, [pc, #60]	; (80008ac <HAL_GPIO_EXTI_Callback+0x54c>)
 800086e:	f000 fc52 	bl	8001116 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8000872:	2201      	movs	r2, #1
 8000874:	2110      	movs	r1, #16
 8000876:	480d      	ldr	r0, [pc, #52]	; (80008ac <HAL_GPIO_EXTI_Callback+0x54c>)
 8000878:	f000 fc4d 	bl	8001116 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 800087c:	2201      	movs	r2, #1
 800087e:	2120      	movs	r1, #32
 8000880:	480a      	ldr	r0, [pc, #40]	; (80008ac <HAL_GPIO_EXTI_Callback+0x54c>)
 8000882:	f000 fc48 	bl	8001116 <HAL_GPIO_WritePin>
    /*Configure GPIO pins : PB6 PB7 PB8 PB9 back to EXTI*/
    GPIO_InitStructPrivate.Mode = GPIO_MODE_IT_RISING;
 8000886:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <HAL_GPIO_EXTI_Callback+0x560>)
 8000888:	4a0e      	ldr	r2, [pc, #56]	; (80008c4 <HAL_GPIO_EXTI_Callback+0x564>)
 800088a:	605a      	str	r2, [r3, #4]
    GPIO_InitStructPrivate.Pull = GPIO_PULLDOWN;
 800088c:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <HAL_GPIO_EXTI_Callback+0x560>)
 800088e:	2202      	movs	r2, #2
 8000890:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructPrivate);
 8000892:	490b      	ldr	r1, [pc, #44]	; (80008c0 <HAL_GPIO_EXTI_Callback+0x560>)
 8000894:	4805      	ldr	r0, [pc, #20]	; (80008ac <HAL_GPIO_EXTI_Callback+0x54c>)
 8000896:	f000 faab 	bl	8000df0 <HAL_GPIO_Init>
    previousMillis = currentMillis;
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <HAL_GPIO_EXTI_Callback+0x568>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4a0b      	ldr	r2, [pc, #44]	; (80008cc <HAL_GPIO_EXTI_Callback+0x56c>)
 80008a0:	6013      	str	r3, [r2, #0]
  }
}
 80008a2:	bf00      	nop
 80008a4:	3748      	adds	r7, #72	; 0x48
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40010c00 	.word	0x40010c00
 80008b0:	080026a8 	.word	0x080026a8
 80008b4:	2000008c 	.word	0x2000008c
 80008b8:	200000ac 	.word	0x200000ac
 80008bc:	40010800 	.word	0x40010800
 80008c0:	200000f4 	.word	0x200000f4
 80008c4:	10110000 	.word	0x10110000
 80008c8:	20000108 	.word	0x20000108
 80008cc:	20000104 	.word	0x20000104

080008d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d4:	b672      	cpsid	i
}
 80008d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <Error_Handler+0x8>
	...

080008dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008e2:	4b15      	ldr	r3, [pc, #84]	; (8000938 <HAL_MspInit+0x5c>)
 80008e4:	699b      	ldr	r3, [r3, #24]
 80008e6:	4a14      	ldr	r2, [pc, #80]	; (8000938 <HAL_MspInit+0x5c>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6193      	str	r3, [r2, #24]
 80008ee:	4b12      	ldr	r3, [pc, #72]	; (8000938 <HAL_MspInit+0x5c>)
 80008f0:	699b      	ldr	r3, [r3, #24]
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	60bb      	str	r3, [r7, #8]
 80008f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fa:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <HAL_MspInit+0x5c>)
 80008fc:	69db      	ldr	r3, [r3, #28]
 80008fe:	4a0e      	ldr	r2, [pc, #56]	; (8000938 <HAL_MspInit+0x5c>)
 8000900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000904:	61d3      	str	r3, [r2, #28]
 8000906:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <HAL_MspInit+0x5c>)
 8000908:	69db      	ldr	r3, [r3, #28]
 800090a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000912:	4b0a      	ldr	r3, [pc, #40]	; (800093c <HAL_MspInit+0x60>)
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	4a04      	ldr	r2, [pc, #16]	; (800093c <HAL_MspInit+0x60>)
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800092e:	bf00      	nop
 8000930:	3714      	adds	r7, #20
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr
 8000938:	40021000 	.word	0x40021000
 800093c:	40010000 	.word	0x40010000

08000940 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b088      	sub	sp, #32
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000948:	f107 0310 	add.w	r3, r7, #16
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a1c      	ldr	r2, [pc, #112]	; (80009cc <HAL_UART_MspInit+0x8c>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d131      	bne.n	80009c4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000960:	4b1b      	ldr	r3, [pc, #108]	; (80009d0 <HAL_UART_MspInit+0x90>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	4a1a      	ldr	r2, [pc, #104]	; (80009d0 <HAL_UART_MspInit+0x90>)
 8000966:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800096a:	6193      	str	r3, [r2, #24]
 800096c:	4b18      	ldr	r3, [pc, #96]	; (80009d0 <HAL_UART_MspInit+0x90>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000978:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <HAL_UART_MspInit+0x90>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	4a14      	ldr	r2, [pc, #80]	; (80009d0 <HAL_UART_MspInit+0x90>)
 800097e:	f043 0304 	orr.w	r3, r3, #4
 8000982:	6193      	str	r3, [r2, #24]
 8000984:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <HAL_UART_MspInit+0x90>)
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	f003 0304 	and.w	r3, r3, #4
 800098c:	60bb      	str	r3, [r7, #8]
 800098e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000990:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000994:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	2302      	movs	r3, #2
 8000998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800099a:	2303      	movs	r3, #3
 800099c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099e:	f107 0310 	add.w	r3, r7, #16
 80009a2:	4619      	mov	r1, r3
 80009a4:	480b      	ldr	r0, [pc, #44]	; (80009d4 <HAL_UART_MspInit+0x94>)
 80009a6:	f000 fa23 	bl	8000df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b8:	f107 0310 	add.w	r3, r7, #16
 80009bc:	4619      	mov	r1, r3
 80009be:	4805      	ldr	r0, [pc, #20]	; (80009d4 <HAL_UART_MspInit+0x94>)
 80009c0:	f000 fa16 	bl	8000df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80009c4:	bf00      	nop
 80009c6:	3720      	adds	r7, #32
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40013800 	.word	0x40013800
 80009d0:	40021000 	.word	0x40021000
 80009d4:	40010800 	.word	0x40010800

080009d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009dc:	e7fe      	b.n	80009dc <NMI_Handler+0x4>

080009de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e2:	e7fe      	b.n	80009e2 <HardFault_Handler+0x4>

080009e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <MemManage_Handler+0x4>

080009ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ee:	e7fe      	b.n	80009ee <BusFault_Handler+0x4>

080009f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <UsageFault_Handler+0x4>

080009f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bc80      	pop	{r7}
 8000a00:	4770      	bx	lr

08000a02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bc80      	pop	{r7}
 8000a0c:	4770      	bx	lr

08000a0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bc80      	pop	{r7}
 8000a18:	4770      	bx	lr

08000a1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a1e:	f000 f8bd 	bl	8000b9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000a2a:	2040      	movs	r0, #64	; 0x40
 8000a2c:	f000 fb8c 	bl	8001148 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000a30:	2080      	movs	r0, #128	; 0x80
 8000a32:	f000 fb89 	bl	8001148 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000a36:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000a3a:	f000 fb85 	bl	8001148 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000a3e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a42:	f000 fb81 	bl	8001148 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
	...

08000a4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a54:	4a14      	ldr	r2, [pc, #80]	; (8000aa8 <_sbrk+0x5c>)
 8000a56:	4b15      	ldr	r3, [pc, #84]	; (8000aac <_sbrk+0x60>)
 8000a58:	1ad3      	subs	r3, r2, r3
 8000a5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a60:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <_sbrk+0x64>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d102      	bne.n	8000a6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a68:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <_sbrk+0x64>)
 8000a6a:	4a12      	ldr	r2, [pc, #72]	; (8000ab4 <_sbrk+0x68>)
 8000a6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a6e:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <_sbrk+0x64>)
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4413      	add	r3, r2
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d207      	bcs.n	8000a8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a7c:	f001 f95c 	bl	8001d38 <__errno>
 8000a80:	4603      	mov	r3, r0
 8000a82:	220c      	movs	r2, #12
 8000a84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a86:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8a:	e009      	b.n	8000aa0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a8c:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <_sbrk+0x64>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a92:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <_sbrk+0x64>)
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4413      	add	r3, r2
 8000a9a:	4a05      	ldr	r2, [pc, #20]	; (8000ab0 <_sbrk+0x64>)
 8000a9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3718      	adds	r7, #24
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20002800 	.word	0x20002800
 8000aac:	00000400 	.word	0x00000400
 8000ab0:	2000010c 	.word	0x2000010c
 8000ab4:	20000128 	.word	0x20000128

08000ab8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bc80      	pop	{r7}
 8000ac2:	4770      	bx	lr

08000ac4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ac4:	f7ff fff8 	bl	8000ab8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ac8:	480b      	ldr	r0, [pc, #44]	; (8000af8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000aca:	490c      	ldr	r1, [pc, #48]	; (8000afc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000acc:	4a0c      	ldr	r2, [pc, #48]	; (8000b00 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000ace:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad0:	e002      	b.n	8000ad8 <LoopCopyDataInit>

08000ad2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ad2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ad6:	3304      	adds	r3, #4

08000ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ada:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000adc:	d3f9      	bcc.n	8000ad2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ade:	4a09      	ldr	r2, [pc, #36]	; (8000b04 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ae0:	4c09      	ldr	r4, [pc, #36]	; (8000b08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ae2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae4:	e001      	b.n	8000aea <LoopFillZerobss>

08000ae6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ae6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae8:	3204      	adds	r2, #4

08000aea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aec:	d3fb      	bcc.n	8000ae6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aee:	f001 f929 	bl	8001d44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000af2:	f7ff fb33 	bl	800015c <main>
  bx lr
 8000af6:	4770      	bx	lr
  ldr r0, =_sdata
 8000af8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000afc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b00:	08002720 	.word	0x08002720
  ldr r2, =_sbss
 8000b04:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b08:	20000124 	.word	0x20000124

08000b0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b0c:	e7fe      	b.n	8000b0c <ADC1_2_IRQHandler>
	...

08000b10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b14:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <HAL_Init+0x28>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a07      	ldr	r2, [pc, #28]	; (8000b38 <HAL_Init+0x28>)
 8000b1a:	f043 0310 	orr.w	r3, r3, #16
 8000b1e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b20:	2003      	movs	r0, #3
 8000b22:	f000 f923 	bl	8000d6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b26:	200f      	movs	r0, #15
 8000b28:	f000 f808 	bl	8000b3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b2c:	f7ff fed6 	bl	80008dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b30:	2300      	movs	r3, #0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40022000 	.word	0x40022000

08000b3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b44:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <HAL_InitTick+0x54>)
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <HAL_InitTick+0x58>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f000 f93b 	bl	8000dd6 <HAL_SYSTICK_Config>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
 8000b68:	e00e      	b.n	8000b88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2b0f      	cmp	r3, #15
 8000b6e:	d80a      	bhi.n	8000b86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b70:	2200      	movs	r2, #0
 8000b72:	6879      	ldr	r1, [r7, #4]
 8000b74:	f04f 30ff 	mov.w	r0, #4294967295
 8000b78:	f000 f903 	bl	8000d82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b7c:	4a06      	ldr	r2, [pc, #24]	; (8000b98 <HAL_InitTick+0x5c>)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b82:	2300      	movs	r3, #0
 8000b84:	e000      	b.n	8000b88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000000 	.word	0x20000000
 8000b94:	20000008 	.word	0x20000008
 8000b98:	20000004 	.word	0x20000004

08000b9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ba0:	4b05      	ldr	r3, [pc, #20]	; (8000bb8 <HAL_IncTick+0x1c>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <HAL_IncTick+0x20>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4413      	add	r3, r2
 8000bac:	4a03      	ldr	r2, [pc, #12]	; (8000bbc <HAL_IncTick+0x20>)
 8000bae:	6013      	str	r3, [r2, #0]
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bc80      	pop	{r7}
 8000bb6:	4770      	bx	lr
 8000bb8:	20000008 	.word	0x20000008
 8000bbc:	20000110 	.word	0x20000110

08000bc0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc4:	4b02      	ldr	r3, [pc, #8]	; (8000bd0 <HAL_GetTick+0x10>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr
 8000bd0:	20000110 	.word	0x20000110

08000bd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f003 0307 	and.w	r3, r3, #7
 8000be2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be4:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <__NVIC_SetPriorityGrouping+0x44>)
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bea:	68ba      	ldr	r2, [r7, #8]
 8000bec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c06:	4a04      	ldr	r2, [pc, #16]	; (8000c18 <__NVIC_SetPriorityGrouping+0x44>)
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	60d3      	str	r3, [r2, #12]
}
 8000c0c:	bf00      	nop
 8000c0e:	3714      	adds	r7, #20
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bc80      	pop	{r7}
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c20:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <__NVIC_GetPriorityGrouping+0x18>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	0a1b      	lsrs	r3, r3, #8
 8000c26:	f003 0307 	and.w	r3, r3, #7
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bc80      	pop	{r7}
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	db0b      	blt.n	8000c62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	f003 021f 	and.w	r2, r3, #31
 8000c50:	4906      	ldr	r1, [pc, #24]	; (8000c6c <__NVIC_EnableIRQ+0x34>)
 8000c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c56:	095b      	lsrs	r3, r3, #5
 8000c58:	2001      	movs	r0, #1
 8000c5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c62:	bf00      	nop
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bc80      	pop	{r7}
 8000c6a:	4770      	bx	lr
 8000c6c:	e000e100 	.word	0xe000e100

08000c70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	6039      	str	r1, [r7, #0]
 8000c7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	db0a      	blt.n	8000c9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	490c      	ldr	r1, [pc, #48]	; (8000cbc <__NVIC_SetPriority+0x4c>)
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	0112      	lsls	r2, r2, #4
 8000c90:	b2d2      	uxtb	r2, r2
 8000c92:	440b      	add	r3, r1
 8000c94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c98:	e00a      	b.n	8000cb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	b2da      	uxtb	r2, r3
 8000c9e:	4908      	ldr	r1, [pc, #32]	; (8000cc0 <__NVIC_SetPriority+0x50>)
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	f003 030f 	and.w	r3, r3, #15
 8000ca6:	3b04      	subs	r3, #4
 8000ca8:	0112      	lsls	r2, r2, #4
 8000caa:	b2d2      	uxtb	r2, r2
 8000cac:	440b      	add	r3, r1
 8000cae:	761a      	strb	r2, [r3, #24]
}
 8000cb0:	bf00      	nop
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bc80      	pop	{r7}
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000e100 	.word	0xe000e100
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b089      	sub	sp, #36	; 0x24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	f003 0307 	and.w	r3, r3, #7
 8000cd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	f1c3 0307 	rsb	r3, r3, #7
 8000cde:	2b04      	cmp	r3, #4
 8000ce0:	bf28      	it	cs
 8000ce2:	2304      	movcs	r3, #4
 8000ce4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	3304      	adds	r3, #4
 8000cea:	2b06      	cmp	r3, #6
 8000cec:	d902      	bls.n	8000cf4 <NVIC_EncodePriority+0x30>
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	3b03      	subs	r3, #3
 8000cf2:	e000      	b.n	8000cf6 <NVIC_EncodePriority+0x32>
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cfc:	69bb      	ldr	r3, [r7, #24]
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	43da      	mvns	r2, r3
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	401a      	ands	r2, r3
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	fa01 f303 	lsl.w	r3, r1, r3
 8000d16:	43d9      	mvns	r1, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d1c:	4313      	orrs	r3, r2
         );
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3724      	adds	r7, #36	; 0x24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bc80      	pop	{r7}
 8000d26:	4770      	bx	lr

08000d28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d38:	d301      	bcc.n	8000d3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e00f      	b.n	8000d5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d3e:	4a0a      	ldr	r2, [pc, #40]	; (8000d68 <SysTick_Config+0x40>)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	3b01      	subs	r3, #1
 8000d44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d46:	210f      	movs	r1, #15
 8000d48:	f04f 30ff 	mov.w	r0, #4294967295
 8000d4c:	f7ff ff90 	bl	8000c70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d50:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <SysTick_Config+0x40>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d56:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <SysTick_Config+0x40>)
 8000d58:	2207      	movs	r2, #7
 8000d5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	e000e010 	.word	0xe000e010

08000d6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f7ff ff2d 	bl	8000bd4 <__NVIC_SetPriorityGrouping>
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b086      	sub	sp, #24
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	4603      	mov	r3, r0
 8000d8a:	60b9      	str	r1, [r7, #8]
 8000d8c:	607a      	str	r2, [r7, #4]
 8000d8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d94:	f7ff ff42 	bl	8000c1c <__NVIC_GetPriorityGrouping>
 8000d98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	68b9      	ldr	r1, [r7, #8]
 8000d9e:	6978      	ldr	r0, [r7, #20]
 8000da0:	f7ff ff90 	bl	8000cc4 <NVIC_EncodePriority>
 8000da4:	4602      	mov	r2, r0
 8000da6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000daa:	4611      	mov	r1, r2
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff ff5f 	bl	8000c70 <__NVIC_SetPriority>
}
 8000db2:	bf00      	nop
 8000db4:	3718      	adds	r7, #24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b082      	sub	sp, #8
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff ff35 	bl	8000c38 <__NVIC_EnableIRQ>
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b082      	sub	sp, #8
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f7ff ffa2 	bl	8000d28 <SysTick_Config>
 8000de4:	4603      	mov	r3, r0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
	...

08000df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b08b      	sub	sp, #44	; 0x2c
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e02:	e161      	b.n	80010c8 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e04:	2201      	movs	r2, #1
 8000e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	69fa      	ldr	r2, [r7, #28]
 8000e14:	4013      	ands	r3, r2
 8000e16:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	f040 8150 	bne.w	80010c2 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	4a97      	ldr	r2, [pc, #604]	; (8001084 <HAL_GPIO_Init+0x294>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d05e      	beq.n	8000eea <HAL_GPIO_Init+0xfa>
 8000e2c:	4a95      	ldr	r2, [pc, #596]	; (8001084 <HAL_GPIO_Init+0x294>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d875      	bhi.n	8000f1e <HAL_GPIO_Init+0x12e>
 8000e32:	4a95      	ldr	r2, [pc, #596]	; (8001088 <HAL_GPIO_Init+0x298>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d058      	beq.n	8000eea <HAL_GPIO_Init+0xfa>
 8000e38:	4a93      	ldr	r2, [pc, #588]	; (8001088 <HAL_GPIO_Init+0x298>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d86f      	bhi.n	8000f1e <HAL_GPIO_Init+0x12e>
 8000e3e:	4a93      	ldr	r2, [pc, #588]	; (800108c <HAL_GPIO_Init+0x29c>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d052      	beq.n	8000eea <HAL_GPIO_Init+0xfa>
 8000e44:	4a91      	ldr	r2, [pc, #580]	; (800108c <HAL_GPIO_Init+0x29c>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d869      	bhi.n	8000f1e <HAL_GPIO_Init+0x12e>
 8000e4a:	4a91      	ldr	r2, [pc, #580]	; (8001090 <HAL_GPIO_Init+0x2a0>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d04c      	beq.n	8000eea <HAL_GPIO_Init+0xfa>
 8000e50:	4a8f      	ldr	r2, [pc, #572]	; (8001090 <HAL_GPIO_Init+0x2a0>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d863      	bhi.n	8000f1e <HAL_GPIO_Init+0x12e>
 8000e56:	4a8f      	ldr	r2, [pc, #572]	; (8001094 <HAL_GPIO_Init+0x2a4>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d046      	beq.n	8000eea <HAL_GPIO_Init+0xfa>
 8000e5c:	4a8d      	ldr	r2, [pc, #564]	; (8001094 <HAL_GPIO_Init+0x2a4>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d85d      	bhi.n	8000f1e <HAL_GPIO_Init+0x12e>
 8000e62:	2b12      	cmp	r3, #18
 8000e64:	d82a      	bhi.n	8000ebc <HAL_GPIO_Init+0xcc>
 8000e66:	2b12      	cmp	r3, #18
 8000e68:	d859      	bhi.n	8000f1e <HAL_GPIO_Init+0x12e>
 8000e6a:	a201      	add	r2, pc, #4	; (adr r2, 8000e70 <HAL_GPIO_Init+0x80>)
 8000e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e70:	08000eeb 	.word	0x08000eeb
 8000e74:	08000ec5 	.word	0x08000ec5
 8000e78:	08000ed7 	.word	0x08000ed7
 8000e7c:	08000f19 	.word	0x08000f19
 8000e80:	08000f1f 	.word	0x08000f1f
 8000e84:	08000f1f 	.word	0x08000f1f
 8000e88:	08000f1f 	.word	0x08000f1f
 8000e8c:	08000f1f 	.word	0x08000f1f
 8000e90:	08000f1f 	.word	0x08000f1f
 8000e94:	08000f1f 	.word	0x08000f1f
 8000e98:	08000f1f 	.word	0x08000f1f
 8000e9c:	08000f1f 	.word	0x08000f1f
 8000ea0:	08000f1f 	.word	0x08000f1f
 8000ea4:	08000f1f 	.word	0x08000f1f
 8000ea8:	08000f1f 	.word	0x08000f1f
 8000eac:	08000f1f 	.word	0x08000f1f
 8000eb0:	08000f1f 	.word	0x08000f1f
 8000eb4:	08000ecd 	.word	0x08000ecd
 8000eb8:	08000ee1 	.word	0x08000ee1
 8000ebc:	4a76      	ldr	r2, [pc, #472]	; (8001098 <HAL_GPIO_Init+0x2a8>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d013      	beq.n	8000eea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ec2:	e02c      	b.n	8000f1e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	623b      	str	r3, [r7, #32]
          break;
 8000eca:	e029      	b.n	8000f20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	3304      	adds	r3, #4
 8000ed2:	623b      	str	r3, [r7, #32]
          break;
 8000ed4:	e024      	b.n	8000f20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	68db      	ldr	r3, [r3, #12]
 8000eda:	3308      	adds	r3, #8
 8000edc:	623b      	str	r3, [r7, #32]
          break;
 8000ede:	e01f      	b.n	8000f20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	330c      	adds	r3, #12
 8000ee6:	623b      	str	r3, [r7, #32]
          break;
 8000ee8:	e01a      	b.n	8000f20 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d102      	bne.n	8000ef8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ef2:	2304      	movs	r3, #4
 8000ef4:	623b      	str	r3, [r7, #32]
          break;
 8000ef6:	e013      	b.n	8000f20 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d105      	bne.n	8000f0c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f00:	2308      	movs	r3, #8
 8000f02:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	69fa      	ldr	r2, [r7, #28]
 8000f08:	611a      	str	r2, [r3, #16]
          break;
 8000f0a:	e009      	b.n	8000f20 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f0c:	2308      	movs	r3, #8
 8000f0e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	69fa      	ldr	r2, [r7, #28]
 8000f14:	615a      	str	r2, [r3, #20]
          break;
 8000f16:	e003      	b.n	8000f20 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	623b      	str	r3, [r7, #32]
          break;
 8000f1c:	e000      	b.n	8000f20 <HAL_GPIO_Init+0x130>
          break;
 8000f1e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	2bff      	cmp	r3, #255	; 0xff
 8000f24:	d801      	bhi.n	8000f2a <HAL_GPIO_Init+0x13a>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	e001      	b.n	8000f2e <HAL_GPIO_Init+0x13e>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	3304      	adds	r3, #4
 8000f2e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	2bff      	cmp	r3, #255	; 0xff
 8000f34:	d802      	bhi.n	8000f3c <HAL_GPIO_Init+0x14c>
 8000f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	e002      	b.n	8000f42 <HAL_GPIO_Init+0x152>
 8000f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3e:	3b08      	subs	r3, #8
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	210f      	movs	r1, #15
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f50:	43db      	mvns	r3, r3
 8000f52:	401a      	ands	r2, r3
 8000f54:	6a39      	ldr	r1, [r7, #32]
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5c:	431a      	orrs	r2, r3
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	f000 80a9 	beq.w	80010c2 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f70:	4b4a      	ldr	r3, [pc, #296]	; (800109c <HAL_GPIO_Init+0x2ac>)
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	4a49      	ldr	r2, [pc, #292]	; (800109c <HAL_GPIO_Init+0x2ac>)
 8000f76:	f043 0301 	orr.w	r3, r3, #1
 8000f7a:	6193      	str	r3, [r2, #24]
 8000f7c:	4b47      	ldr	r3, [pc, #284]	; (800109c <HAL_GPIO_Init+0x2ac>)
 8000f7e:	699b      	ldr	r3, [r3, #24]
 8000f80:	f003 0301 	and.w	r3, r3, #1
 8000f84:	60bb      	str	r3, [r7, #8]
 8000f86:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f88:	4a45      	ldr	r2, [pc, #276]	; (80010a0 <HAL_GPIO_Init+0x2b0>)
 8000f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8c:	089b      	lsrs	r3, r3, #2
 8000f8e:	3302      	adds	r3, #2
 8000f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f94:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f98:	f003 0303 	and.w	r3, r3, #3
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	220f      	movs	r2, #15
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4a3d      	ldr	r2, [pc, #244]	; (80010a4 <HAL_GPIO_Init+0x2b4>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d00d      	beq.n	8000fd0 <HAL_GPIO_Init+0x1e0>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	4a3c      	ldr	r2, [pc, #240]	; (80010a8 <HAL_GPIO_Init+0x2b8>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d007      	beq.n	8000fcc <HAL_GPIO_Init+0x1dc>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4a3b      	ldr	r2, [pc, #236]	; (80010ac <HAL_GPIO_Init+0x2bc>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d101      	bne.n	8000fc8 <HAL_GPIO_Init+0x1d8>
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	e004      	b.n	8000fd2 <HAL_GPIO_Init+0x1e2>
 8000fc8:	2303      	movs	r3, #3
 8000fca:	e002      	b.n	8000fd2 <HAL_GPIO_Init+0x1e2>
 8000fcc:	2301      	movs	r3, #1
 8000fce:	e000      	b.n	8000fd2 <HAL_GPIO_Init+0x1e2>
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fd4:	f002 0203 	and.w	r2, r2, #3
 8000fd8:	0092      	lsls	r2, r2, #2
 8000fda:	4093      	lsls	r3, r2
 8000fdc:	68fa      	ldr	r2, [r7, #12]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000fe2:	492f      	ldr	r1, [pc, #188]	; (80010a0 <HAL_GPIO_Init+0x2b0>)
 8000fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe6:	089b      	lsrs	r3, r3, #2
 8000fe8:	3302      	adds	r3, #2
 8000fea:	68fa      	ldr	r2, [r7, #12]
 8000fec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d006      	beq.n	800100a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ffc:	4b2c      	ldr	r3, [pc, #176]	; (80010b0 <HAL_GPIO_Init+0x2c0>)
 8000ffe:	689a      	ldr	r2, [r3, #8]
 8001000:	492b      	ldr	r1, [pc, #172]	; (80010b0 <HAL_GPIO_Init+0x2c0>)
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	4313      	orrs	r3, r2
 8001006:	608b      	str	r3, [r1, #8]
 8001008:	e006      	b.n	8001018 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800100a:	4b29      	ldr	r3, [pc, #164]	; (80010b0 <HAL_GPIO_Init+0x2c0>)
 800100c:	689a      	ldr	r2, [r3, #8]
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	43db      	mvns	r3, r3
 8001012:	4927      	ldr	r1, [pc, #156]	; (80010b0 <HAL_GPIO_Init+0x2c0>)
 8001014:	4013      	ands	r3, r2
 8001016:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d006      	beq.n	8001032 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001024:	4b22      	ldr	r3, [pc, #136]	; (80010b0 <HAL_GPIO_Init+0x2c0>)
 8001026:	68da      	ldr	r2, [r3, #12]
 8001028:	4921      	ldr	r1, [pc, #132]	; (80010b0 <HAL_GPIO_Init+0x2c0>)
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	4313      	orrs	r3, r2
 800102e:	60cb      	str	r3, [r1, #12]
 8001030:	e006      	b.n	8001040 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001032:	4b1f      	ldr	r3, [pc, #124]	; (80010b0 <HAL_GPIO_Init+0x2c0>)
 8001034:	68da      	ldr	r2, [r3, #12]
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	43db      	mvns	r3, r3
 800103a:	491d      	ldr	r1, [pc, #116]	; (80010b0 <HAL_GPIO_Init+0x2c0>)
 800103c:	4013      	ands	r3, r2
 800103e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d006      	beq.n	800105a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800104c:	4b18      	ldr	r3, [pc, #96]	; (80010b0 <HAL_GPIO_Init+0x2c0>)
 800104e:	685a      	ldr	r2, [r3, #4]
 8001050:	4917      	ldr	r1, [pc, #92]	; (80010b0 <HAL_GPIO_Init+0x2c0>)
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	4313      	orrs	r3, r2
 8001056:	604b      	str	r3, [r1, #4]
 8001058:	e006      	b.n	8001068 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800105a:	4b15      	ldr	r3, [pc, #84]	; (80010b0 <HAL_GPIO_Init+0x2c0>)
 800105c:	685a      	ldr	r2, [r3, #4]
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	43db      	mvns	r3, r3
 8001062:	4913      	ldr	r1, [pc, #76]	; (80010b0 <HAL_GPIO_Init+0x2c0>)
 8001064:	4013      	ands	r3, r2
 8001066:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d01f      	beq.n	80010b4 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001074:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <HAL_GPIO_Init+0x2c0>)
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	490d      	ldr	r1, [pc, #52]	; (80010b0 <HAL_GPIO_Init+0x2c0>)
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	4313      	orrs	r3, r2
 800107e:	600b      	str	r3, [r1, #0]
 8001080:	e01f      	b.n	80010c2 <HAL_GPIO_Init+0x2d2>
 8001082:	bf00      	nop
 8001084:	10320000 	.word	0x10320000
 8001088:	10310000 	.word	0x10310000
 800108c:	10220000 	.word	0x10220000
 8001090:	10210000 	.word	0x10210000
 8001094:	10120000 	.word	0x10120000
 8001098:	10110000 	.word	0x10110000
 800109c:	40021000 	.word	0x40021000
 80010a0:	40010000 	.word	0x40010000
 80010a4:	40010800 	.word	0x40010800
 80010a8:	40010c00 	.word	0x40010c00
 80010ac:	40011000 	.word	0x40011000
 80010b0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010b4:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <HAL_GPIO_Init+0x2f4>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	43db      	mvns	r3, r3
 80010bc:	4909      	ldr	r1, [pc, #36]	; (80010e4 <HAL_GPIO_Init+0x2f4>)
 80010be:	4013      	ands	r3, r2
 80010c0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80010c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c4:	3301      	adds	r3, #1
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ce:	fa22 f303 	lsr.w	r3, r2, r3
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	f47f ae96 	bne.w	8000e04 <HAL_GPIO_Init+0x14>
  }
}
 80010d8:	bf00      	nop
 80010da:	bf00      	nop
 80010dc:	372c      	adds	r7, #44	; 0x2c
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr
 80010e4:	40010400 	.word	0x40010400

080010e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	460b      	mov	r3, r1
 80010f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	689a      	ldr	r2, [r3, #8]
 80010f8:	887b      	ldrh	r3, [r7, #2]
 80010fa:	4013      	ands	r3, r2
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d002      	beq.n	8001106 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001100:	2301      	movs	r3, #1
 8001102:	73fb      	strb	r3, [r7, #15]
 8001104:	e001      	b.n	800110a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001106:	2300      	movs	r3, #0
 8001108:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800110a:	7bfb      	ldrb	r3, [r7, #15]
}
 800110c:	4618      	mov	r0, r3
 800110e:	3714      	adds	r7, #20
 8001110:	46bd      	mov	sp, r7
 8001112:	bc80      	pop	{r7}
 8001114:	4770      	bx	lr

08001116 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001116:	b480      	push	{r7}
 8001118:	b083      	sub	sp, #12
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
 800111e:	460b      	mov	r3, r1
 8001120:	807b      	strh	r3, [r7, #2]
 8001122:	4613      	mov	r3, r2
 8001124:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001126:	787b      	ldrb	r3, [r7, #1]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d003      	beq.n	8001134 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800112c:	887a      	ldrh	r2, [r7, #2]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001132:	e003      	b.n	800113c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001134:	887b      	ldrh	r3, [r7, #2]
 8001136:	041a      	lsls	r2, r3, #16
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	611a      	str	r2, [r3, #16]
}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	bc80      	pop	{r7}
 8001144:	4770      	bx	lr
	...

08001148 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001152:	4b08      	ldr	r3, [pc, #32]	; (8001174 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001154:	695a      	ldr	r2, [r3, #20]
 8001156:	88fb      	ldrh	r3, [r7, #6]
 8001158:	4013      	ands	r3, r2
 800115a:	2b00      	cmp	r3, #0
 800115c:	d006      	beq.n	800116c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800115e:	4a05      	ldr	r2, [pc, #20]	; (8001174 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001160:	88fb      	ldrh	r3, [r7, #6]
 8001162:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001164:	88fb      	ldrh	r3, [r7, #6]
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff f8fa 	bl	8000360 <HAL_GPIO_EXTI_Callback>
  }
}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40010400 	.word	0x40010400

08001178 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d101      	bne.n	800118a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e272      	b.n	8001670 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	2b00      	cmp	r3, #0
 8001194:	f000 8087 	beq.w	80012a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001198:	4b92      	ldr	r3, [pc, #584]	; (80013e4 <HAL_RCC_OscConfig+0x26c>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f003 030c 	and.w	r3, r3, #12
 80011a0:	2b04      	cmp	r3, #4
 80011a2:	d00c      	beq.n	80011be <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011a4:	4b8f      	ldr	r3, [pc, #572]	; (80013e4 <HAL_RCC_OscConfig+0x26c>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f003 030c 	and.w	r3, r3, #12
 80011ac:	2b08      	cmp	r3, #8
 80011ae:	d112      	bne.n	80011d6 <HAL_RCC_OscConfig+0x5e>
 80011b0:	4b8c      	ldr	r3, [pc, #560]	; (80013e4 <HAL_RCC_OscConfig+0x26c>)
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011bc:	d10b      	bne.n	80011d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011be:	4b89      	ldr	r3, [pc, #548]	; (80013e4 <HAL_RCC_OscConfig+0x26c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d06c      	beq.n	80012a4 <HAL_RCC_OscConfig+0x12c>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d168      	bne.n	80012a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e24c      	b.n	8001670 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011de:	d106      	bne.n	80011ee <HAL_RCC_OscConfig+0x76>
 80011e0:	4b80      	ldr	r3, [pc, #512]	; (80013e4 <HAL_RCC_OscConfig+0x26c>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a7f      	ldr	r2, [pc, #508]	; (80013e4 <HAL_RCC_OscConfig+0x26c>)
 80011e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011ea:	6013      	str	r3, [r2, #0]
 80011ec:	e02e      	b.n	800124c <HAL_RCC_OscConfig+0xd4>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d10c      	bne.n	8001210 <HAL_RCC_OscConfig+0x98>
 80011f6:	4b7b      	ldr	r3, [pc, #492]	; (80013e4 <HAL_RCC_OscConfig+0x26c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a7a      	ldr	r2, [pc, #488]	; (80013e4 <HAL_RCC_OscConfig+0x26c>)
 80011fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001200:	6013      	str	r3, [r2, #0]
 8001202:	4b78      	ldr	r3, [pc, #480]	; (80013e4 <HAL_RCC_OscConfig+0x26c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a77      	ldr	r2, [pc, #476]	; (80013e4 <HAL_RCC_OscConfig+0x26c>)
 8001208:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800120c:	6013      	str	r3, [r2, #0]
 800120e:	e01d      	b.n	800124c <HAL_RCC_OscConfig+0xd4>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001218:	d10c      	bne.n	8001234 <HAL_RCC_OscConfig+0xbc>
 800121a:	4b72      	ldr	r3, [pc, #456]	; (80013e4 <HAL_RCC_OscConfig+0x26c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a71      	ldr	r2, [pc, #452]	; (80013e4 <HAL_RCC_OscConfig+0x26c>)
 8001220:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001224:	6013      	str	r3, [r2, #0]
 8001226:	4b6f      	ldr	r3, [pc, #444]	; (80013e4 <HAL_RCC_OscConfig+0x26c>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a6e      	ldr	r2, [pc, #440]	; (80013e4 <HAL_RCC_OscConfig+0x26c>)
 800122c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001230:	6013      	str	r3, [r2, #0]
 8001232:	e00b      	b.n	800124c <HAL_RCC_OscConfig+0xd4>
 8001234:	4b6b      	ldr	r3, [pc, #428]	; (80013e4 <HAL_RCC_OscConfig+0x26c>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a6a      	ldr	r2, [pc, #424]	; (80013e4 <HAL_RCC_OscConfig+0x26c>)
 800123a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800123e:	6013      	str	r3, [r2, #0]
 8001240:	4b68      	ldr	r3, [pc, #416]	; (80013e4 <HAL_RCC_OscConfig+0x26c>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a67      	ldr	r2, [pc, #412]	; (80013e4 <HAL_RCC_OscConfig+0x26c>)
 8001246:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800124a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d013      	beq.n	800127c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001254:	f7ff fcb4 	bl	8000bc0 <HAL_GetTick>
 8001258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800125a:	e008      	b.n	800126e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800125c:	f7ff fcb0 	bl	8000bc0 <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	2b64      	cmp	r3, #100	; 0x64
 8001268:	d901      	bls.n	800126e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e200      	b.n	8001670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800126e:	4b5d      	ldr	r3, [pc, #372]	; (80013e4 <HAL_RCC_OscConfig+0x26c>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d0f0      	beq.n	800125c <HAL_RCC_OscConfig+0xe4>
 800127a:	e014      	b.n	80012a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800127c:	f7ff fca0 	bl	8000bc0 <HAL_GetTick>
 8001280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001282:	e008      	b.n	8001296 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001284:	f7ff fc9c 	bl	8000bc0 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b64      	cmp	r3, #100	; 0x64
 8001290:	d901      	bls.n	8001296 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e1ec      	b.n	8001670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001296:	4b53      	ldr	r3, [pc, #332]	; (80013e4 <HAL_RCC_OscConfig+0x26c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1f0      	bne.n	8001284 <HAL_RCC_OscConfig+0x10c>
 80012a2:	e000      	b.n	80012a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d063      	beq.n	800137a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012b2:	4b4c      	ldr	r3, [pc, #304]	; (80013e4 <HAL_RCC_OscConfig+0x26c>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f003 030c 	and.w	r3, r3, #12
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d00b      	beq.n	80012d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012be:	4b49      	ldr	r3, [pc, #292]	; (80013e4 <HAL_RCC_OscConfig+0x26c>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f003 030c 	and.w	r3, r3, #12
 80012c6:	2b08      	cmp	r3, #8
 80012c8:	d11c      	bne.n	8001304 <HAL_RCC_OscConfig+0x18c>
 80012ca:	4b46      	ldr	r3, [pc, #280]	; (80013e4 <HAL_RCC_OscConfig+0x26c>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d116      	bne.n	8001304 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012d6:	4b43      	ldr	r3, [pc, #268]	; (80013e4 <HAL_RCC_OscConfig+0x26c>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d005      	beq.n	80012ee <HAL_RCC_OscConfig+0x176>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	691b      	ldr	r3, [r3, #16]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d001      	beq.n	80012ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e1c0      	b.n	8001670 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ee:	4b3d      	ldr	r3, [pc, #244]	; (80013e4 <HAL_RCC_OscConfig+0x26c>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	00db      	lsls	r3, r3, #3
 80012fc:	4939      	ldr	r1, [pc, #228]	; (80013e4 <HAL_RCC_OscConfig+0x26c>)
 80012fe:	4313      	orrs	r3, r2
 8001300:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001302:	e03a      	b.n	800137a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	691b      	ldr	r3, [r3, #16]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d020      	beq.n	800134e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800130c:	4b36      	ldr	r3, [pc, #216]	; (80013e8 <HAL_RCC_OscConfig+0x270>)
 800130e:	2201      	movs	r2, #1
 8001310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001312:	f7ff fc55 	bl	8000bc0 <HAL_GetTick>
 8001316:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001318:	e008      	b.n	800132c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800131a:	f7ff fc51 	bl	8000bc0 <HAL_GetTick>
 800131e:	4602      	mov	r2, r0
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	2b02      	cmp	r3, #2
 8001326:	d901      	bls.n	800132c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001328:	2303      	movs	r3, #3
 800132a:	e1a1      	b.n	8001670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800132c:	4b2d      	ldr	r3, [pc, #180]	; (80013e4 <HAL_RCC_OscConfig+0x26c>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 0302 	and.w	r3, r3, #2
 8001334:	2b00      	cmp	r3, #0
 8001336:	d0f0      	beq.n	800131a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001338:	4b2a      	ldr	r3, [pc, #168]	; (80013e4 <HAL_RCC_OscConfig+0x26c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	695b      	ldr	r3, [r3, #20]
 8001344:	00db      	lsls	r3, r3, #3
 8001346:	4927      	ldr	r1, [pc, #156]	; (80013e4 <HAL_RCC_OscConfig+0x26c>)
 8001348:	4313      	orrs	r3, r2
 800134a:	600b      	str	r3, [r1, #0]
 800134c:	e015      	b.n	800137a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800134e:	4b26      	ldr	r3, [pc, #152]	; (80013e8 <HAL_RCC_OscConfig+0x270>)
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001354:	f7ff fc34 	bl	8000bc0 <HAL_GetTick>
 8001358:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800135a:	e008      	b.n	800136e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800135c:	f7ff fc30 	bl	8000bc0 <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	2b02      	cmp	r3, #2
 8001368:	d901      	bls.n	800136e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e180      	b.n	8001670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800136e:	4b1d      	ldr	r3, [pc, #116]	; (80013e4 <HAL_RCC_OscConfig+0x26c>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	2b00      	cmp	r3, #0
 8001378:	d1f0      	bne.n	800135c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0308 	and.w	r3, r3, #8
 8001382:	2b00      	cmp	r3, #0
 8001384:	d03a      	beq.n	80013fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	699b      	ldr	r3, [r3, #24]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d019      	beq.n	80013c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800138e:	4b17      	ldr	r3, [pc, #92]	; (80013ec <HAL_RCC_OscConfig+0x274>)
 8001390:	2201      	movs	r2, #1
 8001392:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001394:	f7ff fc14 	bl	8000bc0 <HAL_GetTick>
 8001398:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800139a:	e008      	b.n	80013ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800139c:	f7ff fc10 	bl	8000bc0 <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e160      	b.n	8001670 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ae:	4b0d      	ldr	r3, [pc, #52]	; (80013e4 <HAL_RCC_OscConfig+0x26c>)
 80013b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d0f0      	beq.n	800139c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80013ba:	2001      	movs	r0, #1
 80013bc:	f000 face 	bl	800195c <RCC_Delay>
 80013c0:	e01c      	b.n	80013fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013c2:	4b0a      	ldr	r3, [pc, #40]	; (80013ec <HAL_RCC_OscConfig+0x274>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c8:	f7ff fbfa 	bl	8000bc0 <HAL_GetTick>
 80013cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013ce:	e00f      	b.n	80013f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013d0:	f7ff fbf6 	bl	8000bc0 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d908      	bls.n	80013f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e146      	b.n	8001670 <HAL_RCC_OscConfig+0x4f8>
 80013e2:	bf00      	nop
 80013e4:	40021000 	.word	0x40021000
 80013e8:	42420000 	.word	0x42420000
 80013ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013f0:	4b92      	ldr	r3, [pc, #584]	; (800163c <HAL_RCC_OscConfig+0x4c4>)
 80013f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f4:	f003 0302 	and.w	r3, r3, #2
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d1e9      	bne.n	80013d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 0304 	and.w	r3, r3, #4
 8001404:	2b00      	cmp	r3, #0
 8001406:	f000 80a6 	beq.w	8001556 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800140a:	2300      	movs	r3, #0
 800140c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800140e:	4b8b      	ldr	r3, [pc, #556]	; (800163c <HAL_RCC_OscConfig+0x4c4>)
 8001410:	69db      	ldr	r3, [r3, #28]
 8001412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d10d      	bne.n	8001436 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800141a:	4b88      	ldr	r3, [pc, #544]	; (800163c <HAL_RCC_OscConfig+0x4c4>)
 800141c:	69db      	ldr	r3, [r3, #28]
 800141e:	4a87      	ldr	r2, [pc, #540]	; (800163c <HAL_RCC_OscConfig+0x4c4>)
 8001420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001424:	61d3      	str	r3, [r2, #28]
 8001426:	4b85      	ldr	r3, [pc, #532]	; (800163c <HAL_RCC_OscConfig+0x4c4>)
 8001428:	69db      	ldr	r3, [r3, #28]
 800142a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800142e:	60bb      	str	r3, [r7, #8]
 8001430:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001432:	2301      	movs	r3, #1
 8001434:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001436:	4b82      	ldr	r3, [pc, #520]	; (8001640 <HAL_RCC_OscConfig+0x4c8>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800143e:	2b00      	cmp	r3, #0
 8001440:	d118      	bne.n	8001474 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001442:	4b7f      	ldr	r3, [pc, #508]	; (8001640 <HAL_RCC_OscConfig+0x4c8>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a7e      	ldr	r2, [pc, #504]	; (8001640 <HAL_RCC_OscConfig+0x4c8>)
 8001448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800144c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800144e:	f7ff fbb7 	bl	8000bc0 <HAL_GetTick>
 8001452:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001454:	e008      	b.n	8001468 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001456:	f7ff fbb3 	bl	8000bc0 <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	2b64      	cmp	r3, #100	; 0x64
 8001462:	d901      	bls.n	8001468 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e103      	b.n	8001670 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001468:	4b75      	ldr	r3, [pc, #468]	; (8001640 <HAL_RCC_OscConfig+0x4c8>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001470:	2b00      	cmp	r3, #0
 8001472:	d0f0      	beq.n	8001456 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d106      	bne.n	800148a <HAL_RCC_OscConfig+0x312>
 800147c:	4b6f      	ldr	r3, [pc, #444]	; (800163c <HAL_RCC_OscConfig+0x4c4>)
 800147e:	6a1b      	ldr	r3, [r3, #32]
 8001480:	4a6e      	ldr	r2, [pc, #440]	; (800163c <HAL_RCC_OscConfig+0x4c4>)
 8001482:	f043 0301 	orr.w	r3, r3, #1
 8001486:	6213      	str	r3, [r2, #32]
 8001488:	e02d      	b.n	80014e6 <HAL_RCC_OscConfig+0x36e>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d10c      	bne.n	80014ac <HAL_RCC_OscConfig+0x334>
 8001492:	4b6a      	ldr	r3, [pc, #424]	; (800163c <HAL_RCC_OscConfig+0x4c4>)
 8001494:	6a1b      	ldr	r3, [r3, #32]
 8001496:	4a69      	ldr	r2, [pc, #420]	; (800163c <HAL_RCC_OscConfig+0x4c4>)
 8001498:	f023 0301 	bic.w	r3, r3, #1
 800149c:	6213      	str	r3, [r2, #32]
 800149e:	4b67      	ldr	r3, [pc, #412]	; (800163c <HAL_RCC_OscConfig+0x4c4>)
 80014a0:	6a1b      	ldr	r3, [r3, #32]
 80014a2:	4a66      	ldr	r2, [pc, #408]	; (800163c <HAL_RCC_OscConfig+0x4c4>)
 80014a4:	f023 0304 	bic.w	r3, r3, #4
 80014a8:	6213      	str	r3, [r2, #32]
 80014aa:	e01c      	b.n	80014e6 <HAL_RCC_OscConfig+0x36e>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	2b05      	cmp	r3, #5
 80014b2:	d10c      	bne.n	80014ce <HAL_RCC_OscConfig+0x356>
 80014b4:	4b61      	ldr	r3, [pc, #388]	; (800163c <HAL_RCC_OscConfig+0x4c4>)
 80014b6:	6a1b      	ldr	r3, [r3, #32]
 80014b8:	4a60      	ldr	r2, [pc, #384]	; (800163c <HAL_RCC_OscConfig+0x4c4>)
 80014ba:	f043 0304 	orr.w	r3, r3, #4
 80014be:	6213      	str	r3, [r2, #32]
 80014c0:	4b5e      	ldr	r3, [pc, #376]	; (800163c <HAL_RCC_OscConfig+0x4c4>)
 80014c2:	6a1b      	ldr	r3, [r3, #32]
 80014c4:	4a5d      	ldr	r2, [pc, #372]	; (800163c <HAL_RCC_OscConfig+0x4c4>)
 80014c6:	f043 0301 	orr.w	r3, r3, #1
 80014ca:	6213      	str	r3, [r2, #32]
 80014cc:	e00b      	b.n	80014e6 <HAL_RCC_OscConfig+0x36e>
 80014ce:	4b5b      	ldr	r3, [pc, #364]	; (800163c <HAL_RCC_OscConfig+0x4c4>)
 80014d0:	6a1b      	ldr	r3, [r3, #32]
 80014d2:	4a5a      	ldr	r2, [pc, #360]	; (800163c <HAL_RCC_OscConfig+0x4c4>)
 80014d4:	f023 0301 	bic.w	r3, r3, #1
 80014d8:	6213      	str	r3, [r2, #32]
 80014da:	4b58      	ldr	r3, [pc, #352]	; (800163c <HAL_RCC_OscConfig+0x4c4>)
 80014dc:	6a1b      	ldr	r3, [r3, #32]
 80014de:	4a57      	ldr	r2, [pc, #348]	; (800163c <HAL_RCC_OscConfig+0x4c4>)
 80014e0:	f023 0304 	bic.w	r3, r3, #4
 80014e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d015      	beq.n	800151a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ee:	f7ff fb67 	bl	8000bc0 <HAL_GetTick>
 80014f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014f4:	e00a      	b.n	800150c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014f6:	f7ff fb63 	bl	8000bc0 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	f241 3288 	movw	r2, #5000	; 0x1388
 8001504:	4293      	cmp	r3, r2
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e0b1      	b.n	8001670 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800150c:	4b4b      	ldr	r3, [pc, #300]	; (800163c <HAL_RCC_OscConfig+0x4c4>)
 800150e:	6a1b      	ldr	r3, [r3, #32]
 8001510:	f003 0302 	and.w	r3, r3, #2
 8001514:	2b00      	cmp	r3, #0
 8001516:	d0ee      	beq.n	80014f6 <HAL_RCC_OscConfig+0x37e>
 8001518:	e014      	b.n	8001544 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800151a:	f7ff fb51 	bl	8000bc0 <HAL_GetTick>
 800151e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001520:	e00a      	b.n	8001538 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001522:	f7ff fb4d 	bl	8000bc0 <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001530:	4293      	cmp	r3, r2
 8001532:	d901      	bls.n	8001538 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e09b      	b.n	8001670 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001538:	4b40      	ldr	r3, [pc, #256]	; (800163c <HAL_RCC_OscConfig+0x4c4>)
 800153a:	6a1b      	ldr	r3, [r3, #32]
 800153c:	f003 0302 	and.w	r3, r3, #2
 8001540:	2b00      	cmp	r3, #0
 8001542:	d1ee      	bne.n	8001522 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001544:	7dfb      	ldrb	r3, [r7, #23]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d105      	bne.n	8001556 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800154a:	4b3c      	ldr	r3, [pc, #240]	; (800163c <HAL_RCC_OscConfig+0x4c4>)
 800154c:	69db      	ldr	r3, [r3, #28]
 800154e:	4a3b      	ldr	r2, [pc, #236]	; (800163c <HAL_RCC_OscConfig+0x4c4>)
 8001550:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001554:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	69db      	ldr	r3, [r3, #28]
 800155a:	2b00      	cmp	r3, #0
 800155c:	f000 8087 	beq.w	800166e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001560:	4b36      	ldr	r3, [pc, #216]	; (800163c <HAL_RCC_OscConfig+0x4c4>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f003 030c 	and.w	r3, r3, #12
 8001568:	2b08      	cmp	r3, #8
 800156a:	d061      	beq.n	8001630 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	69db      	ldr	r3, [r3, #28]
 8001570:	2b02      	cmp	r3, #2
 8001572:	d146      	bne.n	8001602 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001574:	4b33      	ldr	r3, [pc, #204]	; (8001644 <HAL_RCC_OscConfig+0x4cc>)
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800157a:	f7ff fb21 	bl	8000bc0 <HAL_GetTick>
 800157e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001580:	e008      	b.n	8001594 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001582:	f7ff fb1d 	bl	8000bc0 <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	2b02      	cmp	r3, #2
 800158e:	d901      	bls.n	8001594 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e06d      	b.n	8001670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001594:	4b29      	ldr	r3, [pc, #164]	; (800163c <HAL_RCC_OscConfig+0x4c4>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d1f0      	bne.n	8001582 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6a1b      	ldr	r3, [r3, #32]
 80015a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015a8:	d108      	bne.n	80015bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015aa:	4b24      	ldr	r3, [pc, #144]	; (800163c <HAL_RCC_OscConfig+0x4c4>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	4921      	ldr	r1, [pc, #132]	; (800163c <HAL_RCC_OscConfig+0x4c4>)
 80015b8:	4313      	orrs	r3, r2
 80015ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015bc:	4b1f      	ldr	r3, [pc, #124]	; (800163c <HAL_RCC_OscConfig+0x4c4>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a19      	ldr	r1, [r3, #32]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015cc:	430b      	orrs	r3, r1
 80015ce:	491b      	ldr	r1, [pc, #108]	; (800163c <HAL_RCC_OscConfig+0x4c4>)
 80015d0:	4313      	orrs	r3, r2
 80015d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015d4:	4b1b      	ldr	r3, [pc, #108]	; (8001644 <HAL_RCC_OscConfig+0x4cc>)
 80015d6:	2201      	movs	r2, #1
 80015d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015da:	f7ff faf1 	bl	8000bc0 <HAL_GetTick>
 80015de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015e0:	e008      	b.n	80015f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015e2:	f7ff faed 	bl	8000bc0 <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d901      	bls.n	80015f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e03d      	b.n	8001670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015f4:	4b11      	ldr	r3, [pc, #68]	; (800163c <HAL_RCC_OscConfig+0x4c4>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d0f0      	beq.n	80015e2 <HAL_RCC_OscConfig+0x46a>
 8001600:	e035      	b.n	800166e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001602:	4b10      	ldr	r3, [pc, #64]	; (8001644 <HAL_RCC_OscConfig+0x4cc>)
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001608:	f7ff fada 	bl	8000bc0 <HAL_GetTick>
 800160c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001610:	f7ff fad6 	bl	8000bc0 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e026      	b.n	8001670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001622:	4b06      	ldr	r3, [pc, #24]	; (800163c <HAL_RCC_OscConfig+0x4c4>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1f0      	bne.n	8001610 <HAL_RCC_OscConfig+0x498>
 800162e:	e01e      	b.n	800166e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	69db      	ldr	r3, [r3, #28]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d107      	bne.n	8001648 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e019      	b.n	8001670 <HAL_RCC_OscConfig+0x4f8>
 800163c:	40021000 	.word	0x40021000
 8001640:	40007000 	.word	0x40007000
 8001644:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001648:	4b0b      	ldr	r3, [pc, #44]	; (8001678 <HAL_RCC_OscConfig+0x500>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6a1b      	ldr	r3, [r3, #32]
 8001658:	429a      	cmp	r2, r3
 800165a:	d106      	bne.n	800166a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001666:	429a      	cmp	r2, r3
 8001668:	d001      	beq.n	800166e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e000      	b.n	8001670 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800166e:	2300      	movs	r3, #0
}
 8001670:	4618      	mov	r0, r3
 8001672:	3718      	adds	r7, #24
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40021000 	.word	0x40021000

0800167c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d101      	bne.n	8001690 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e0d0      	b.n	8001832 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001690:	4b6a      	ldr	r3, [pc, #424]	; (800183c <HAL_RCC_ClockConfig+0x1c0>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0307 	and.w	r3, r3, #7
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	429a      	cmp	r2, r3
 800169c:	d910      	bls.n	80016c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800169e:	4b67      	ldr	r3, [pc, #412]	; (800183c <HAL_RCC_ClockConfig+0x1c0>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f023 0207 	bic.w	r2, r3, #7
 80016a6:	4965      	ldr	r1, [pc, #404]	; (800183c <HAL_RCC_ClockConfig+0x1c0>)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ae:	4b63      	ldr	r3, [pc, #396]	; (800183c <HAL_RCC_ClockConfig+0x1c0>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	683a      	ldr	r2, [r7, #0]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d001      	beq.n	80016c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e0b8      	b.n	8001832 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0302 	and.w	r3, r3, #2
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d020      	beq.n	800170e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0304 	and.w	r3, r3, #4
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d005      	beq.n	80016e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016d8:	4b59      	ldr	r3, [pc, #356]	; (8001840 <HAL_RCC_ClockConfig+0x1c4>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	4a58      	ldr	r2, [pc, #352]	; (8001840 <HAL_RCC_ClockConfig+0x1c4>)
 80016de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80016e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0308 	and.w	r3, r3, #8
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d005      	beq.n	80016fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016f0:	4b53      	ldr	r3, [pc, #332]	; (8001840 <HAL_RCC_ClockConfig+0x1c4>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	4a52      	ldr	r2, [pc, #328]	; (8001840 <HAL_RCC_ClockConfig+0x1c4>)
 80016f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80016fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016fc:	4b50      	ldr	r3, [pc, #320]	; (8001840 <HAL_RCC_ClockConfig+0x1c4>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	494d      	ldr	r1, [pc, #308]	; (8001840 <HAL_RCC_ClockConfig+0x1c4>)
 800170a:	4313      	orrs	r3, r2
 800170c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	2b00      	cmp	r3, #0
 8001718:	d040      	beq.n	800179c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d107      	bne.n	8001732 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001722:	4b47      	ldr	r3, [pc, #284]	; (8001840 <HAL_RCC_ClockConfig+0x1c4>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d115      	bne.n	800175a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e07f      	b.n	8001832 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	2b02      	cmp	r3, #2
 8001738:	d107      	bne.n	800174a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800173a:	4b41      	ldr	r3, [pc, #260]	; (8001840 <HAL_RCC_ClockConfig+0x1c4>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d109      	bne.n	800175a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e073      	b.n	8001832 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800174a:	4b3d      	ldr	r3, [pc, #244]	; (8001840 <HAL_RCC_ClockConfig+0x1c4>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e06b      	b.n	8001832 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800175a:	4b39      	ldr	r3, [pc, #228]	; (8001840 <HAL_RCC_ClockConfig+0x1c4>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f023 0203 	bic.w	r2, r3, #3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	4936      	ldr	r1, [pc, #216]	; (8001840 <HAL_RCC_ClockConfig+0x1c4>)
 8001768:	4313      	orrs	r3, r2
 800176a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800176c:	f7ff fa28 	bl	8000bc0 <HAL_GetTick>
 8001770:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001772:	e00a      	b.n	800178a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001774:	f7ff fa24 	bl	8000bc0 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001782:	4293      	cmp	r3, r2
 8001784:	d901      	bls.n	800178a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e053      	b.n	8001832 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800178a:	4b2d      	ldr	r3, [pc, #180]	; (8001840 <HAL_RCC_ClockConfig+0x1c4>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f003 020c 	and.w	r2, r3, #12
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	429a      	cmp	r2, r3
 800179a:	d1eb      	bne.n	8001774 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800179c:	4b27      	ldr	r3, [pc, #156]	; (800183c <HAL_RCC_ClockConfig+0x1c0>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0307 	and.w	r3, r3, #7
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d210      	bcs.n	80017cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017aa:	4b24      	ldr	r3, [pc, #144]	; (800183c <HAL_RCC_ClockConfig+0x1c0>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f023 0207 	bic.w	r2, r3, #7
 80017b2:	4922      	ldr	r1, [pc, #136]	; (800183c <HAL_RCC_ClockConfig+0x1c0>)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ba:	4b20      	ldr	r3, [pc, #128]	; (800183c <HAL_RCC_ClockConfig+0x1c0>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0307 	and.w	r3, r3, #7
 80017c2:	683a      	ldr	r2, [r7, #0]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d001      	beq.n	80017cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e032      	b.n	8001832 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0304 	and.w	r3, r3, #4
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d008      	beq.n	80017ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017d8:	4b19      	ldr	r3, [pc, #100]	; (8001840 <HAL_RCC_ClockConfig+0x1c4>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	4916      	ldr	r1, [pc, #88]	; (8001840 <HAL_RCC_ClockConfig+0x1c4>)
 80017e6:	4313      	orrs	r3, r2
 80017e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0308 	and.w	r3, r3, #8
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d009      	beq.n	800180a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017f6:	4b12      	ldr	r3, [pc, #72]	; (8001840 <HAL_RCC_ClockConfig+0x1c4>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	490e      	ldr	r1, [pc, #56]	; (8001840 <HAL_RCC_ClockConfig+0x1c4>)
 8001806:	4313      	orrs	r3, r2
 8001808:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800180a:	f000 f821 	bl	8001850 <HAL_RCC_GetSysClockFreq>
 800180e:	4602      	mov	r2, r0
 8001810:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <HAL_RCC_ClockConfig+0x1c4>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	091b      	lsrs	r3, r3, #4
 8001816:	f003 030f 	and.w	r3, r3, #15
 800181a:	490a      	ldr	r1, [pc, #40]	; (8001844 <HAL_RCC_ClockConfig+0x1c8>)
 800181c:	5ccb      	ldrb	r3, [r1, r3]
 800181e:	fa22 f303 	lsr.w	r3, r2, r3
 8001822:	4a09      	ldr	r2, [pc, #36]	; (8001848 <HAL_RCC_ClockConfig+0x1cc>)
 8001824:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001826:	4b09      	ldr	r3, [pc, #36]	; (800184c <HAL_RCC_ClockConfig+0x1d0>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff f986 	bl	8000b3c <HAL_InitTick>

  return HAL_OK;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40022000 	.word	0x40022000
 8001840:	40021000 	.word	0x40021000
 8001844:	080026b8 	.word	0x080026b8
 8001848:	20000000 	.word	0x20000000
 800184c:	20000004 	.word	0x20000004

08001850 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001850:	b480      	push	{r7}
 8001852:	b087      	sub	sp, #28
 8001854:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001856:	2300      	movs	r3, #0
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	2300      	movs	r3, #0
 800185c:	60bb      	str	r3, [r7, #8]
 800185e:	2300      	movs	r3, #0
 8001860:	617b      	str	r3, [r7, #20]
 8001862:	2300      	movs	r3, #0
 8001864:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001866:	2300      	movs	r3, #0
 8001868:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800186a:	4b1e      	ldr	r3, [pc, #120]	; (80018e4 <HAL_RCC_GetSysClockFreq+0x94>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f003 030c 	and.w	r3, r3, #12
 8001876:	2b04      	cmp	r3, #4
 8001878:	d002      	beq.n	8001880 <HAL_RCC_GetSysClockFreq+0x30>
 800187a:	2b08      	cmp	r3, #8
 800187c:	d003      	beq.n	8001886 <HAL_RCC_GetSysClockFreq+0x36>
 800187e:	e027      	b.n	80018d0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001880:	4b19      	ldr	r3, [pc, #100]	; (80018e8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001882:	613b      	str	r3, [r7, #16]
      break;
 8001884:	e027      	b.n	80018d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	0c9b      	lsrs	r3, r3, #18
 800188a:	f003 030f 	and.w	r3, r3, #15
 800188e:	4a17      	ldr	r2, [pc, #92]	; (80018ec <HAL_RCC_GetSysClockFreq+0x9c>)
 8001890:	5cd3      	ldrb	r3, [r2, r3]
 8001892:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d010      	beq.n	80018c0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800189e:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <HAL_RCC_GetSysClockFreq+0x94>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	0c5b      	lsrs	r3, r3, #17
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	4a11      	ldr	r2, [pc, #68]	; (80018f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80018aa:	5cd3      	ldrb	r3, [r2, r3]
 80018ac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a0d      	ldr	r2, [pc, #52]	; (80018e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80018b2:	fb03 f202 	mul.w	r2, r3, r2
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018bc:	617b      	str	r3, [r7, #20]
 80018be:	e004      	b.n	80018ca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4a0c      	ldr	r2, [pc, #48]	; (80018f4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80018c4:	fb02 f303 	mul.w	r3, r2, r3
 80018c8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	613b      	str	r3, [r7, #16]
      break;
 80018ce:	e002      	b.n	80018d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018d0:	4b05      	ldr	r3, [pc, #20]	; (80018e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80018d2:	613b      	str	r3, [r7, #16]
      break;
 80018d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018d6:	693b      	ldr	r3, [r7, #16]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	371c      	adds	r7, #28
 80018dc:	46bd      	mov	sp, r7
 80018de:	bc80      	pop	{r7}
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	40021000 	.word	0x40021000
 80018e8:	007a1200 	.word	0x007a1200
 80018ec:	080026d0 	.word	0x080026d0
 80018f0:	080026e0 	.word	0x080026e0
 80018f4:	003d0900 	.word	0x003d0900

080018f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018fc:	4b02      	ldr	r3, [pc, #8]	; (8001908 <HAL_RCC_GetHCLKFreq+0x10>)
 80018fe:	681b      	ldr	r3, [r3, #0]
}
 8001900:	4618      	mov	r0, r3
 8001902:	46bd      	mov	sp, r7
 8001904:	bc80      	pop	{r7}
 8001906:	4770      	bx	lr
 8001908:	20000000 	.word	0x20000000

0800190c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001910:	f7ff fff2 	bl	80018f8 <HAL_RCC_GetHCLKFreq>
 8001914:	4602      	mov	r2, r0
 8001916:	4b05      	ldr	r3, [pc, #20]	; (800192c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	0a1b      	lsrs	r3, r3, #8
 800191c:	f003 0307 	and.w	r3, r3, #7
 8001920:	4903      	ldr	r1, [pc, #12]	; (8001930 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001922:	5ccb      	ldrb	r3, [r1, r3]
 8001924:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001928:	4618      	mov	r0, r3
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40021000 	.word	0x40021000
 8001930:	080026c8 	.word	0x080026c8

08001934 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001938:	f7ff ffde 	bl	80018f8 <HAL_RCC_GetHCLKFreq>
 800193c:	4602      	mov	r2, r0
 800193e:	4b05      	ldr	r3, [pc, #20]	; (8001954 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	0adb      	lsrs	r3, r3, #11
 8001944:	f003 0307 	and.w	r3, r3, #7
 8001948:	4903      	ldr	r1, [pc, #12]	; (8001958 <HAL_RCC_GetPCLK2Freq+0x24>)
 800194a:	5ccb      	ldrb	r3, [r1, r3]
 800194c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001950:	4618      	mov	r0, r3
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40021000 	.word	0x40021000
 8001958:	080026c8 	.word	0x080026c8

0800195c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001964:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <RCC_Delay+0x34>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a0a      	ldr	r2, [pc, #40]	; (8001994 <RCC_Delay+0x38>)
 800196a:	fba2 2303 	umull	r2, r3, r2, r3
 800196e:	0a5b      	lsrs	r3, r3, #9
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	fb02 f303 	mul.w	r3, r2, r3
 8001976:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001978:	bf00      	nop
  }
  while (Delay --);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	1e5a      	subs	r2, r3, #1
 800197e:	60fa      	str	r2, [r7, #12]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d1f9      	bne.n	8001978 <RCC_Delay+0x1c>
}
 8001984:	bf00      	nop
 8001986:	bf00      	nop
 8001988:	3714      	adds	r7, #20
 800198a:	46bd      	mov	sp, r7
 800198c:	bc80      	pop	{r7}
 800198e:	4770      	bx	lr
 8001990:	20000000 	.word	0x20000000
 8001994:	10624dd3 	.word	0x10624dd3

08001998 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d101      	bne.n	80019aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e042      	b.n	8001a30 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d106      	bne.n	80019c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f7fe ffbe 	bl	8000940 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2224      	movs	r2, #36	; 0x24
 80019c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	68da      	ldr	r2, [r3, #12]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f000 f91d 	bl	8001c1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	691a      	ldr	r2, [r3, #16]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80019f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	695a      	ldr	r2, [r3, #20]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	68da      	ldr	r2, [r3, #12]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2220      	movs	r2, #32
 8001a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2220      	movs	r2, #32
 8001a24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3708      	adds	r7, #8
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b08a      	sub	sp, #40	; 0x28
 8001a3c:	af02      	add	r7, sp, #8
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	603b      	str	r3, [r7, #0]
 8001a44:	4613      	mov	r3, r2
 8001a46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	2b20      	cmp	r3, #32
 8001a56:	d16d      	bne.n	8001b34 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d002      	beq.n	8001a64 <HAL_UART_Transmit+0x2c>
 8001a5e:	88fb      	ldrh	r3, [r7, #6]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d101      	bne.n	8001a68 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e066      	b.n	8001b36 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2221      	movs	r2, #33	; 0x21
 8001a72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001a76:	f7ff f8a3 	bl	8000bc0 <HAL_GetTick>
 8001a7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	88fa      	ldrh	r2, [r7, #6]
 8001a80:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	88fa      	ldrh	r2, [r7, #6]
 8001a86:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a90:	d108      	bne.n	8001aa4 <HAL_UART_Transmit+0x6c>
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d104      	bne.n	8001aa4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	61bb      	str	r3, [r7, #24]
 8001aa2:	e003      	b.n	8001aac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001aac:	e02a      	b.n	8001b04 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	9300      	str	r3, [sp, #0]
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	2180      	movs	r1, #128	; 0x80
 8001ab8:	68f8      	ldr	r0, [r7, #12]
 8001aba:	f000 f840 	bl	8001b3e <UART_WaitOnFlagUntilTimeout>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e036      	b.n	8001b36 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d10b      	bne.n	8001ae6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	881b      	ldrh	r3, [r3, #0]
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001adc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	3302      	adds	r3, #2
 8001ae2:	61bb      	str	r3, [r7, #24]
 8001ae4:	e007      	b.n	8001af6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	781a      	ldrb	r2, [r3, #0]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	3301      	adds	r3, #1
 8001af4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	3b01      	subs	r3, #1
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1cf      	bne.n	8001aae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	9300      	str	r3, [sp, #0]
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	2200      	movs	r2, #0
 8001b16:	2140      	movs	r1, #64	; 0x40
 8001b18:	68f8      	ldr	r0, [r7, #12]
 8001b1a:	f000 f810 	bl	8001b3e <UART_WaitOnFlagUntilTimeout>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e006      	b.n	8001b36 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2220      	movs	r2, #32
 8001b2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001b30:	2300      	movs	r3, #0
 8001b32:	e000      	b.n	8001b36 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001b34:	2302      	movs	r3, #2
  }
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3720      	adds	r7, #32
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b090      	sub	sp, #64	; 0x40
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	60f8      	str	r0, [r7, #12]
 8001b46:	60b9      	str	r1, [r7, #8]
 8001b48:	603b      	str	r3, [r7, #0]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b4e:	e050      	b.n	8001bf2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b56:	d04c      	beq.n	8001bf2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001b58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d007      	beq.n	8001b6e <UART_WaitOnFlagUntilTimeout+0x30>
 8001b5e:	f7ff f82f 	bl	8000bc0 <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d241      	bcs.n	8001bf2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	330c      	adds	r3, #12
 8001b74:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b78:	e853 3f00 	ldrex	r3, [r3]
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001b84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	330c      	adds	r3, #12
 8001b8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b8e:	637a      	str	r2, [r7, #52]	; 0x34
 8001b90:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b96:	e841 2300 	strex	r3, r2, [r1]
 8001b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1e5      	bne.n	8001b6e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	3314      	adds	r3, #20
 8001ba8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	e853 3f00 	ldrex	r3, [r3]
 8001bb0:	613b      	str	r3, [r7, #16]
   return(result);
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	f023 0301 	bic.w	r3, r3, #1
 8001bb8:	63bb      	str	r3, [r7, #56]	; 0x38
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	3314      	adds	r3, #20
 8001bc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001bc2:	623a      	str	r2, [r7, #32]
 8001bc4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001bc6:	69f9      	ldr	r1, [r7, #28]
 8001bc8:	6a3a      	ldr	r2, [r7, #32]
 8001bca:	e841 2300 	strex	r3, r2, [r1]
 8001bce:	61bb      	str	r3, [r7, #24]
   return(result);
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1e5      	bne.n	8001ba2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2220      	movs	r2, #32
 8001bda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2220      	movs	r2, #32
 8001be2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e00f      	b.n	8001c12 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	68ba      	ldr	r2, [r7, #8]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	bf0c      	ite	eq
 8001c02:	2301      	moveq	r3, #1
 8001c04:	2300      	movne	r3, #0
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	461a      	mov	r2, r3
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d09f      	beq.n	8001b50 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3740      	adds	r7, #64	; 0x40
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
	...

08001c1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	68da      	ldr	r2, [r3, #12]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	430a      	orrs	r2, r1
 8001c38:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	689a      	ldr	r2, [r3, #8]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	431a      	orrs	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	695b      	ldr	r3, [r3, #20]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001c56:	f023 030c 	bic.w	r3, r3, #12
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	6812      	ldr	r2, [r2, #0]
 8001c5e:	68b9      	ldr	r1, [r7, #8]
 8001c60:	430b      	orrs	r3, r1
 8001c62:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	695b      	ldr	r3, [r3, #20]
 8001c6a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	699a      	ldr	r2, [r3, #24]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	430a      	orrs	r2, r1
 8001c78:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a2c      	ldr	r2, [pc, #176]	; (8001d30 <UART_SetConfig+0x114>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d103      	bne.n	8001c8c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001c84:	f7ff fe56 	bl	8001934 <HAL_RCC_GetPCLK2Freq>
 8001c88:	60f8      	str	r0, [r7, #12]
 8001c8a:	e002      	b.n	8001c92 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001c8c:	f7ff fe3e 	bl	800190c <HAL_RCC_GetPCLK1Freq>
 8001c90:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	4613      	mov	r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	4413      	add	r3, r2
 8001c9a:	009a      	lsls	r2, r3, #2
 8001c9c:	441a      	add	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca8:	4a22      	ldr	r2, [pc, #136]	; (8001d34 <UART_SetConfig+0x118>)
 8001caa:	fba2 2303 	umull	r2, r3, r2, r3
 8001cae:	095b      	lsrs	r3, r3, #5
 8001cb0:	0119      	lsls	r1, r3, #4
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	4413      	add	r3, r2
 8001cba:	009a      	lsls	r2, r3, #2
 8001cbc:	441a      	add	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001cc8:	4b1a      	ldr	r3, [pc, #104]	; (8001d34 <UART_SetConfig+0x118>)
 8001cca:	fba3 0302 	umull	r0, r3, r3, r2
 8001cce:	095b      	lsrs	r3, r3, #5
 8001cd0:	2064      	movs	r0, #100	; 0x64
 8001cd2:	fb00 f303 	mul.w	r3, r0, r3
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	011b      	lsls	r3, r3, #4
 8001cda:	3332      	adds	r3, #50	; 0x32
 8001cdc:	4a15      	ldr	r2, [pc, #84]	; (8001d34 <UART_SetConfig+0x118>)
 8001cde:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce2:	095b      	lsrs	r3, r3, #5
 8001ce4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ce8:	4419      	add	r1, r3
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	4613      	mov	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4413      	add	r3, r2
 8001cf2:	009a      	lsls	r2, r3, #2
 8001cf4:	441a      	add	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d00:	4b0c      	ldr	r3, [pc, #48]	; (8001d34 <UART_SetConfig+0x118>)
 8001d02:	fba3 0302 	umull	r0, r3, r3, r2
 8001d06:	095b      	lsrs	r3, r3, #5
 8001d08:	2064      	movs	r0, #100	; 0x64
 8001d0a:	fb00 f303 	mul.w	r3, r0, r3
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	011b      	lsls	r3, r3, #4
 8001d12:	3332      	adds	r3, #50	; 0x32
 8001d14:	4a07      	ldr	r2, [pc, #28]	; (8001d34 <UART_SetConfig+0x118>)
 8001d16:	fba2 2303 	umull	r2, r3, r2, r3
 8001d1a:	095b      	lsrs	r3, r3, #5
 8001d1c:	f003 020f 	and.w	r2, r3, #15
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	440a      	add	r2, r1
 8001d26:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001d28:	bf00      	nop
 8001d2a:	3710      	adds	r7, #16
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40013800 	.word	0x40013800
 8001d34:	51eb851f 	.word	0x51eb851f

08001d38 <__errno>:
 8001d38:	4b01      	ldr	r3, [pc, #4]	; (8001d40 <__errno+0x8>)
 8001d3a:	6818      	ldr	r0, [r3, #0]
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	2000000c 	.word	0x2000000c

08001d44 <__libc_init_array>:
 8001d44:	b570      	push	{r4, r5, r6, lr}
 8001d46:	2600      	movs	r6, #0
 8001d48:	4d0c      	ldr	r5, [pc, #48]	; (8001d7c <__libc_init_array+0x38>)
 8001d4a:	4c0d      	ldr	r4, [pc, #52]	; (8001d80 <__libc_init_array+0x3c>)
 8001d4c:	1b64      	subs	r4, r4, r5
 8001d4e:	10a4      	asrs	r4, r4, #2
 8001d50:	42a6      	cmp	r6, r4
 8001d52:	d109      	bne.n	8001d68 <__libc_init_array+0x24>
 8001d54:	f000 fc9c 	bl	8002690 <_init>
 8001d58:	2600      	movs	r6, #0
 8001d5a:	4d0a      	ldr	r5, [pc, #40]	; (8001d84 <__libc_init_array+0x40>)
 8001d5c:	4c0a      	ldr	r4, [pc, #40]	; (8001d88 <__libc_init_array+0x44>)
 8001d5e:	1b64      	subs	r4, r4, r5
 8001d60:	10a4      	asrs	r4, r4, #2
 8001d62:	42a6      	cmp	r6, r4
 8001d64:	d105      	bne.n	8001d72 <__libc_init_array+0x2e>
 8001d66:	bd70      	pop	{r4, r5, r6, pc}
 8001d68:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d6c:	4798      	blx	r3
 8001d6e:	3601      	adds	r6, #1
 8001d70:	e7ee      	b.n	8001d50 <__libc_init_array+0xc>
 8001d72:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d76:	4798      	blx	r3
 8001d78:	3601      	adds	r6, #1
 8001d7a:	e7f2      	b.n	8001d62 <__libc_init_array+0x1e>
 8001d7c:	08002718 	.word	0x08002718
 8001d80:	08002718 	.word	0x08002718
 8001d84:	08002718 	.word	0x08002718
 8001d88:	0800271c 	.word	0x0800271c

08001d8c <memset>:
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	4402      	add	r2, r0
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d100      	bne.n	8001d96 <memset+0xa>
 8001d94:	4770      	bx	lr
 8001d96:	f803 1b01 	strb.w	r1, [r3], #1
 8001d9a:	e7f9      	b.n	8001d90 <memset+0x4>

08001d9c <siprintf>:
 8001d9c:	b40e      	push	{r1, r2, r3}
 8001d9e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001da2:	b500      	push	{lr}
 8001da4:	b09c      	sub	sp, #112	; 0x70
 8001da6:	ab1d      	add	r3, sp, #116	; 0x74
 8001da8:	9002      	str	r0, [sp, #8]
 8001daa:	9006      	str	r0, [sp, #24]
 8001dac:	9107      	str	r1, [sp, #28]
 8001dae:	9104      	str	r1, [sp, #16]
 8001db0:	4808      	ldr	r0, [pc, #32]	; (8001dd4 <siprintf+0x38>)
 8001db2:	4909      	ldr	r1, [pc, #36]	; (8001dd8 <siprintf+0x3c>)
 8001db4:	f853 2b04 	ldr.w	r2, [r3], #4
 8001db8:	9105      	str	r1, [sp, #20]
 8001dba:	6800      	ldr	r0, [r0, #0]
 8001dbc:	a902      	add	r1, sp, #8
 8001dbe:	9301      	str	r3, [sp, #4]
 8001dc0:	f000 f868 	bl	8001e94 <_svfiprintf_r>
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	9b02      	ldr	r3, [sp, #8]
 8001dc8:	701a      	strb	r2, [r3, #0]
 8001dca:	b01c      	add	sp, #112	; 0x70
 8001dcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8001dd0:	b003      	add	sp, #12
 8001dd2:	4770      	bx	lr
 8001dd4:	2000000c 	.word	0x2000000c
 8001dd8:	ffff0208 	.word	0xffff0208

08001ddc <__ssputs_r>:
 8001ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001de0:	688e      	ldr	r6, [r1, #8]
 8001de2:	4682      	mov	sl, r0
 8001de4:	429e      	cmp	r6, r3
 8001de6:	460c      	mov	r4, r1
 8001de8:	4690      	mov	r8, r2
 8001dea:	461f      	mov	r7, r3
 8001dec:	d838      	bhi.n	8001e60 <__ssputs_r+0x84>
 8001dee:	898a      	ldrh	r2, [r1, #12]
 8001df0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001df4:	d032      	beq.n	8001e5c <__ssputs_r+0x80>
 8001df6:	6825      	ldr	r5, [r4, #0]
 8001df8:	6909      	ldr	r1, [r1, #16]
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	eba5 0901 	sub.w	r9, r5, r1
 8001e00:	6965      	ldr	r5, [r4, #20]
 8001e02:	444b      	add	r3, r9
 8001e04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001e08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001e0c:	106d      	asrs	r5, r5, #1
 8001e0e:	429d      	cmp	r5, r3
 8001e10:	bf38      	it	cc
 8001e12:	461d      	movcc	r5, r3
 8001e14:	0553      	lsls	r3, r2, #21
 8001e16:	d531      	bpl.n	8001e7c <__ssputs_r+0xa0>
 8001e18:	4629      	mov	r1, r5
 8001e1a:	f000 fb6f 	bl	80024fc <_malloc_r>
 8001e1e:	4606      	mov	r6, r0
 8001e20:	b950      	cbnz	r0, 8001e38 <__ssputs_r+0x5c>
 8001e22:	230c      	movs	r3, #12
 8001e24:	f04f 30ff 	mov.w	r0, #4294967295
 8001e28:	f8ca 3000 	str.w	r3, [sl]
 8001e2c:	89a3      	ldrh	r3, [r4, #12]
 8001e2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e32:	81a3      	strh	r3, [r4, #12]
 8001e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e38:	464a      	mov	r2, r9
 8001e3a:	6921      	ldr	r1, [r4, #16]
 8001e3c:	f000 face 	bl	80023dc <memcpy>
 8001e40:	89a3      	ldrh	r3, [r4, #12]
 8001e42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001e46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e4a:	81a3      	strh	r3, [r4, #12]
 8001e4c:	6126      	str	r6, [r4, #16]
 8001e4e:	444e      	add	r6, r9
 8001e50:	6026      	str	r6, [r4, #0]
 8001e52:	463e      	mov	r6, r7
 8001e54:	6165      	str	r5, [r4, #20]
 8001e56:	eba5 0509 	sub.w	r5, r5, r9
 8001e5a:	60a5      	str	r5, [r4, #8]
 8001e5c:	42be      	cmp	r6, r7
 8001e5e:	d900      	bls.n	8001e62 <__ssputs_r+0x86>
 8001e60:	463e      	mov	r6, r7
 8001e62:	4632      	mov	r2, r6
 8001e64:	4641      	mov	r1, r8
 8001e66:	6820      	ldr	r0, [r4, #0]
 8001e68:	f000 fac6 	bl	80023f8 <memmove>
 8001e6c:	68a3      	ldr	r3, [r4, #8]
 8001e6e:	2000      	movs	r0, #0
 8001e70:	1b9b      	subs	r3, r3, r6
 8001e72:	60a3      	str	r3, [r4, #8]
 8001e74:	6823      	ldr	r3, [r4, #0]
 8001e76:	4433      	add	r3, r6
 8001e78:	6023      	str	r3, [r4, #0]
 8001e7a:	e7db      	b.n	8001e34 <__ssputs_r+0x58>
 8001e7c:	462a      	mov	r2, r5
 8001e7e:	f000 fbb1 	bl	80025e4 <_realloc_r>
 8001e82:	4606      	mov	r6, r0
 8001e84:	2800      	cmp	r0, #0
 8001e86:	d1e1      	bne.n	8001e4c <__ssputs_r+0x70>
 8001e88:	4650      	mov	r0, sl
 8001e8a:	6921      	ldr	r1, [r4, #16]
 8001e8c:	f000 face 	bl	800242c <_free_r>
 8001e90:	e7c7      	b.n	8001e22 <__ssputs_r+0x46>
	...

08001e94 <_svfiprintf_r>:
 8001e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e98:	4698      	mov	r8, r3
 8001e9a:	898b      	ldrh	r3, [r1, #12]
 8001e9c:	4607      	mov	r7, r0
 8001e9e:	061b      	lsls	r3, r3, #24
 8001ea0:	460d      	mov	r5, r1
 8001ea2:	4614      	mov	r4, r2
 8001ea4:	b09d      	sub	sp, #116	; 0x74
 8001ea6:	d50e      	bpl.n	8001ec6 <_svfiprintf_r+0x32>
 8001ea8:	690b      	ldr	r3, [r1, #16]
 8001eaa:	b963      	cbnz	r3, 8001ec6 <_svfiprintf_r+0x32>
 8001eac:	2140      	movs	r1, #64	; 0x40
 8001eae:	f000 fb25 	bl	80024fc <_malloc_r>
 8001eb2:	6028      	str	r0, [r5, #0]
 8001eb4:	6128      	str	r0, [r5, #16]
 8001eb6:	b920      	cbnz	r0, 8001ec2 <_svfiprintf_r+0x2e>
 8001eb8:	230c      	movs	r3, #12
 8001eba:	603b      	str	r3, [r7, #0]
 8001ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec0:	e0d1      	b.n	8002066 <_svfiprintf_r+0x1d2>
 8001ec2:	2340      	movs	r3, #64	; 0x40
 8001ec4:	616b      	str	r3, [r5, #20]
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	9309      	str	r3, [sp, #36]	; 0x24
 8001eca:	2320      	movs	r3, #32
 8001ecc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001ed0:	2330      	movs	r3, #48	; 0x30
 8001ed2:	f04f 0901 	mov.w	r9, #1
 8001ed6:	f8cd 800c 	str.w	r8, [sp, #12]
 8001eda:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002080 <_svfiprintf_r+0x1ec>
 8001ede:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001ee2:	4623      	mov	r3, r4
 8001ee4:	469a      	mov	sl, r3
 8001ee6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001eea:	b10a      	cbz	r2, 8001ef0 <_svfiprintf_r+0x5c>
 8001eec:	2a25      	cmp	r2, #37	; 0x25
 8001eee:	d1f9      	bne.n	8001ee4 <_svfiprintf_r+0x50>
 8001ef0:	ebba 0b04 	subs.w	fp, sl, r4
 8001ef4:	d00b      	beq.n	8001f0e <_svfiprintf_r+0x7a>
 8001ef6:	465b      	mov	r3, fp
 8001ef8:	4622      	mov	r2, r4
 8001efa:	4629      	mov	r1, r5
 8001efc:	4638      	mov	r0, r7
 8001efe:	f7ff ff6d 	bl	8001ddc <__ssputs_r>
 8001f02:	3001      	adds	r0, #1
 8001f04:	f000 80aa 	beq.w	800205c <_svfiprintf_r+0x1c8>
 8001f08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001f0a:	445a      	add	r2, fp
 8001f0c:	9209      	str	r2, [sp, #36]	; 0x24
 8001f0e:	f89a 3000 	ldrb.w	r3, [sl]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	f000 80a2 	beq.w	800205c <_svfiprintf_r+0x1c8>
 8001f18:	2300      	movs	r3, #0
 8001f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8001f1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001f22:	f10a 0a01 	add.w	sl, sl, #1
 8001f26:	9304      	str	r3, [sp, #16]
 8001f28:	9307      	str	r3, [sp, #28]
 8001f2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001f2e:	931a      	str	r3, [sp, #104]	; 0x68
 8001f30:	4654      	mov	r4, sl
 8001f32:	2205      	movs	r2, #5
 8001f34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001f38:	4851      	ldr	r0, [pc, #324]	; (8002080 <_svfiprintf_r+0x1ec>)
 8001f3a:	f000 fa41 	bl	80023c0 <memchr>
 8001f3e:	9a04      	ldr	r2, [sp, #16]
 8001f40:	b9d8      	cbnz	r0, 8001f7a <_svfiprintf_r+0xe6>
 8001f42:	06d0      	lsls	r0, r2, #27
 8001f44:	bf44      	itt	mi
 8001f46:	2320      	movmi	r3, #32
 8001f48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001f4c:	0711      	lsls	r1, r2, #28
 8001f4e:	bf44      	itt	mi
 8001f50:	232b      	movmi	r3, #43	; 0x2b
 8001f52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001f56:	f89a 3000 	ldrb.w	r3, [sl]
 8001f5a:	2b2a      	cmp	r3, #42	; 0x2a
 8001f5c:	d015      	beq.n	8001f8a <_svfiprintf_r+0xf6>
 8001f5e:	4654      	mov	r4, sl
 8001f60:	2000      	movs	r0, #0
 8001f62:	f04f 0c0a 	mov.w	ip, #10
 8001f66:	9a07      	ldr	r2, [sp, #28]
 8001f68:	4621      	mov	r1, r4
 8001f6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001f6e:	3b30      	subs	r3, #48	; 0x30
 8001f70:	2b09      	cmp	r3, #9
 8001f72:	d94e      	bls.n	8002012 <_svfiprintf_r+0x17e>
 8001f74:	b1b0      	cbz	r0, 8001fa4 <_svfiprintf_r+0x110>
 8001f76:	9207      	str	r2, [sp, #28]
 8001f78:	e014      	b.n	8001fa4 <_svfiprintf_r+0x110>
 8001f7a:	eba0 0308 	sub.w	r3, r0, r8
 8001f7e:	fa09 f303 	lsl.w	r3, r9, r3
 8001f82:	4313      	orrs	r3, r2
 8001f84:	46a2      	mov	sl, r4
 8001f86:	9304      	str	r3, [sp, #16]
 8001f88:	e7d2      	b.n	8001f30 <_svfiprintf_r+0x9c>
 8001f8a:	9b03      	ldr	r3, [sp, #12]
 8001f8c:	1d19      	adds	r1, r3, #4
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	9103      	str	r1, [sp, #12]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	bfbb      	ittet	lt
 8001f96:	425b      	neglt	r3, r3
 8001f98:	f042 0202 	orrlt.w	r2, r2, #2
 8001f9c:	9307      	strge	r3, [sp, #28]
 8001f9e:	9307      	strlt	r3, [sp, #28]
 8001fa0:	bfb8      	it	lt
 8001fa2:	9204      	strlt	r2, [sp, #16]
 8001fa4:	7823      	ldrb	r3, [r4, #0]
 8001fa6:	2b2e      	cmp	r3, #46	; 0x2e
 8001fa8:	d10c      	bne.n	8001fc4 <_svfiprintf_r+0x130>
 8001faa:	7863      	ldrb	r3, [r4, #1]
 8001fac:	2b2a      	cmp	r3, #42	; 0x2a
 8001fae:	d135      	bne.n	800201c <_svfiprintf_r+0x188>
 8001fb0:	9b03      	ldr	r3, [sp, #12]
 8001fb2:	3402      	adds	r4, #2
 8001fb4:	1d1a      	adds	r2, r3, #4
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	9203      	str	r2, [sp, #12]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	bfb8      	it	lt
 8001fbe:	f04f 33ff 	movlt.w	r3, #4294967295
 8001fc2:	9305      	str	r3, [sp, #20]
 8001fc4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8002084 <_svfiprintf_r+0x1f0>
 8001fc8:	2203      	movs	r2, #3
 8001fca:	4650      	mov	r0, sl
 8001fcc:	7821      	ldrb	r1, [r4, #0]
 8001fce:	f000 f9f7 	bl	80023c0 <memchr>
 8001fd2:	b140      	cbz	r0, 8001fe6 <_svfiprintf_r+0x152>
 8001fd4:	2340      	movs	r3, #64	; 0x40
 8001fd6:	eba0 000a 	sub.w	r0, r0, sl
 8001fda:	fa03 f000 	lsl.w	r0, r3, r0
 8001fde:	9b04      	ldr	r3, [sp, #16]
 8001fe0:	3401      	adds	r4, #1
 8001fe2:	4303      	orrs	r3, r0
 8001fe4:	9304      	str	r3, [sp, #16]
 8001fe6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001fea:	2206      	movs	r2, #6
 8001fec:	4826      	ldr	r0, [pc, #152]	; (8002088 <_svfiprintf_r+0x1f4>)
 8001fee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001ff2:	f000 f9e5 	bl	80023c0 <memchr>
 8001ff6:	2800      	cmp	r0, #0
 8001ff8:	d038      	beq.n	800206c <_svfiprintf_r+0x1d8>
 8001ffa:	4b24      	ldr	r3, [pc, #144]	; (800208c <_svfiprintf_r+0x1f8>)
 8001ffc:	bb1b      	cbnz	r3, 8002046 <_svfiprintf_r+0x1b2>
 8001ffe:	9b03      	ldr	r3, [sp, #12]
 8002000:	3307      	adds	r3, #7
 8002002:	f023 0307 	bic.w	r3, r3, #7
 8002006:	3308      	adds	r3, #8
 8002008:	9303      	str	r3, [sp, #12]
 800200a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800200c:	4433      	add	r3, r6
 800200e:	9309      	str	r3, [sp, #36]	; 0x24
 8002010:	e767      	b.n	8001ee2 <_svfiprintf_r+0x4e>
 8002012:	460c      	mov	r4, r1
 8002014:	2001      	movs	r0, #1
 8002016:	fb0c 3202 	mla	r2, ip, r2, r3
 800201a:	e7a5      	b.n	8001f68 <_svfiprintf_r+0xd4>
 800201c:	2300      	movs	r3, #0
 800201e:	f04f 0c0a 	mov.w	ip, #10
 8002022:	4619      	mov	r1, r3
 8002024:	3401      	adds	r4, #1
 8002026:	9305      	str	r3, [sp, #20]
 8002028:	4620      	mov	r0, r4
 800202a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800202e:	3a30      	subs	r2, #48	; 0x30
 8002030:	2a09      	cmp	r2, #9
 8002032:	d903      	bls.n	800203c <_svfiprintf_r+0x1a8>
 8002034:	2b00      	cmp	r3, #0
 8002036:	d0c5      	beq.n	8001fc4 <_svfiprintf_r+0x130>
 8002038:	9105      	str	r1, [sp, #20]
 800203a:	e7c3      	b.n	8001fc4 <_svfiprintf_r+0x130>
 800203c:	4604      	mov	r4, r0
 800203e:	2301      	movs	r3, #1
 8002040:	fb0c 2101 	mla	r1, ip, r1, r2
 8002044:	e7f0      	b.n	8002028 <_svfiprintf_r+0x194>
 8002046:	ab03      	add	r3, sp, #12
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	462a      	mov	r2, r5
 800204c:	4638      	mov	r0, r7
 800204e:	4b10      	ldr	r3, [pc, #64]	; (8002090 <_svfiprintf_r+0x1fc>)
 8002050:	a904      	add	r1, sp, #16
 8002052:	f3af 8000 	nop.w
 8002056:	1c42      	adds	r2, r0, #1
 8002058:	4606      	mov	r6, r0
 800205a:	d1d6      	bne.n	800200a <_svfiprintf_r+0x176>
 800205c:	89ab      	ldrh	r3, [r5, #12]
 800205e:	065b      	lsls	r3, r3, #25
 8002060:	f53f af2c 	bmi.w	8001ebc <_svfiprintf_r+0x28>
 8002064:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002066:	b01d      	add	sp, #116	; 0x74
 8002068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800206c:	ab03      	add	r3, sp, #12
 800206e:	9300      	str	r3, [sp, #0]
 8002070:	462a      	mov	r2, r5
 8002072:	4638      	mov	r0, r7
 8002074:	4b06      	ldr	r3, [pc, #24]	; (8002090 <_svfiprintf_r+0x1fc>)
 8002076:	a904      	add	r1, sp, #16
 8002078:	f000 f87c 	bl	8002174 <_printf_i>
 800207c:	e7eb      	b.n	8002056 <_svfiprintf_r+0x1c2>
 800207e:	bf00      	nop
 8002080:	080026e2 	.word	0x080026e2
 8002084:	080026e8 	.word	0x080026e8
 8002088:	080026ec 	.word	0x080026ec
 800208c:	00000000 	.word	0x00000000
 8002090:	08001ddd 	.word	0x08001ddd

08002094 <_printf_common>:
 8002094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002098:	4616      	mov	r6, r2
 800209a:	4699      	mov	r9, r3
 800209c:	688a      	ldr	r2, [r1, #8]
 800209e:	690b      	ldr	r3, [r1, #16]
 80020a0:	4607      	mov	r7, r0
 80020a2:	4293      	cmp	r3, r2
 80020a4:	bfb8      	it	lt
 80020a6:	4613      	movlt	r3, r2
 80020a8:	6033      	str	r3, [r6, #0]
 80020aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80020ae:	460c      	mov	r4, r1
 80020b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80020b4:	b10a      	cbz	r2, 80020ba <_printf_common+0x26>
 80020b6:	3301      	adds	r3, #1
 80020b8:	6033      	str	r3, [r6, #0]
 80020ba:	6823      	ldr	r3, [r4, #0]
 80020bc:	0699      	lsls	r1, r3, #26
 80020be:	bf42      	ittt	mi
 80020c0:	6833      	ldrmi	r3, [r6, #0]
 80020c2:	3302      	addmi	r3, #2
 80020c4:	6033      	strmi	r3, [r6, #0]
 80020c6:	6825      	ldr	r5, [r4, #0]
 80020c8:	f015 0506 	ands.w	r5, r5, #6
 80020cc:	d106      	bne.n	80020dc <_printf_common+0x48>
 80020ce:	f104 0a19 	add.w	sl, r4, #25
 80020d2:	68e3      	ldr	r3, [r4, #12]
 80020d4:	6832      	ldr	r2, [r6, #0]
 80020d6:	1a9b      	subs	r3, r3, r2
 80020d8:	42ab      	cmp	r3, r5
 80020da:	dc28      	bgt.n	800212e <_printf_common+0x9a>
 80020dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80020e0:	1e13      	subs	r3, r2, #0
 80020e2:	6822      	ldr	r2, [r4, #0]
 80020e4:	bf18      	it	ne
 80020e6:	2301      	movne	r3, #1
 80020e8:	0692      	lsls	r2, r2, #26
 80020ea:	d42d      	bmi.n	8002148 <_printf_common+0xb4>
 80020ec:	4649      	mov	r1, r9
 80020ee:	4638      	mov	r0, r7
 80020f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80020f4:	47c0      	blx	r8
 80020f6:	3001      	adds	r0, #1
 80020f8:	d020      	beq.n	800213c <_printf_common+0xa8>
 80020fa:	6823      	ldr	r3, [r4, #0]
 80020fc:	68e5      	ldr	r5, [r4, #12]
 80020fe:	f003 0306 	and.w	r3, r3, #6
 8002102:	2b04      	cmp	r3, #4
 8002104:	bf18      	it	ne
 8002106:	2500      	movne	r5, #0
 8002108:	6832      	ldr	r2, [r6, #0]
 800210a:	f04f 0600 	mov.w	r6, #0
 800210e:	68a3      	ldr	r3, [r4, #8]
 8002110:	bf08      	it	eq
 8002112:	1aad      	subeq	r5, r5, r2
 8002114:	6922      	ldr	r2, [r4, #16]
 8002116:	bf08      	it	eq
 8002118:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800211c:	4293      	cmp	r3, r2
 800211e:	bfc4      	itt	gt
 8002120:	1a9b      	subgt	r3, r3, r2
 8002122:	18ed      	addgt	r5, r5, r3
 8002124:	341a      	adds	r4, #26
 8002126:	42b5      	cmp	r5, r6
 8002128:	d11a      	bne.n	8002160 <_printf_common+0xcc>
 800212a:	2000      	movs	r0, #0
 800212c:	e008      	b.n	8002140 <_printf_common+0xac>
 800212e:	2301      	movs	r3, #1
 8002130:	4652      	mov	r2, sl
 8002132:	4649      	mov	r1, r9
 8002134:	4638      	mov	r0, r7
 8002136:	47c0      	blx	r8
 8002138:	3001      	adds	r0, #1
 800213a:	d103      	bne.n	8002144 <_printf_common+0xb0>
 800213c:	f04f 30ff 	mov.w	r0, #4294967295
 8002140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002144:	3501      	adds	r5, #1
 8002146:	e7c4      	b.n	80020d2 <_printf_common+0x3e>
 8002148:	2030      	movs	r0, #48	; 0x30
 800214a:	18e1      	adds	r1, r4, r3
 800214c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002150:	1c5a      	adds	r2, r3, #1
 8002152:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002156:	4422      	add	r2, r4
 8002158:	3302      	adds	r3, #2
 800215a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800215e:	e7c5      	b.n	80020ec <_printf_common+0x58>
 8002160:	2301      	movs	r3, #1
 8002162:	4622      	mov	r2, r4
 8002164:	4649      	mov	r1, r9
 8002166:	4638      	mov	r0, r7
 8002168:	47c0      	blx	r8
 800216a:	3001      	adds	r0, #1
 800216c:	d0e6      	beq.n	800213c <_printf_common+0xa8>
 800216e:	3601      	adds	r6, #1
 8002170:	e7d9      	b.n	8002126 <_printf_common+0x92>
	...

08002174 <_printf_i>:
 8002174:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002178:	7e0f      	ldrb	r7, [r1, #24]
 800217a:	4691      	mov	r9, r2
 800217c:	2f78      	cmp	r7, #120	; 0x78
 800217e:	4680      	mov	r8, r0
 8002180:	460c      	mov	r4, r1
 8002182:	469a      	mov	sl, r3
 8002184:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002186:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800218a:	d807      	bhi.n	800219c <_printf_i+0x28>
 800218c:	2f62      	cmp	r7, #98	; 0x62
 800218e:	d80a      	bhi.n	80021a6 <_printf_i+0x32>
 8002190:	2f00      	cmp	r7, #0
 8002192:	f000 80d9 	beq.w	8002348 <_printf_i+0x1d4>
 8002196:	2f58      	cmp	r7, #88	; 0x58
 8002198:	f000 80a4 	beq.w	80022e4 <_printf_i+0x170>
 800219c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80021a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80021a4:	e03a      	b.n	800221c <_printf_i+0xa8>
 80021a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80021aa:	2b15      	cmp	r3, #21
 80021ac:	d8f6      	bhi.n	800219c <_printf_i+0x28>
 80021ae:	a101      	add	r1, pc, #4	; (adr r1, 80021b4 <_printf_i+0x40>)
 80021b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80021b4:	0800220d 	.word	0x0800220d
 80021b8:	08002221 	.word	0x08002221
 80021bc:	0800219d 	.word	0x0800219d
 80021c0:	0800219d 	.word	0x0800219d
 80021c4:	0800219d 	.word	0x0800219d
 80021c8:	0800219d 	.word	0x0800219d
 80021cc:	08002221 	.word	0x08002221
 80021d0:	0800219d 	.word	0x0800219d
 80021d4:	0800219d 	.word	0x0800219d
 80021d8:	0800219d 	.word	0x0800219d
 80021dc:	0800219d 	.word	0x0800219d
 80021e0:	0800232f 	.word	0x0800232f
 80021e4:	08002251 	.word	0x08002251
 80021e8:	08002311 	.word	0x08002311
 80021ec:	0800219d 	.word	0x0800219d
 80021f0:	0800219d 	.word	0x0800219d
 80021f4:	08002351 	.word	0x08002351
 80021f8:	0800219d 	.word	0x0800219d
 80021fc:	08002251 	.word	0x08002251
 8002200:	0800219d 	.word	0x0800219d
 8002204:	0800219d 	.word	0x0800219d
 8002208:	08002319 	.word	0x08002319
 800220c:	682b      	ldr	r3, [r5, #0]
 800220e:	1d1a      	adds	r2, r3, #4
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	602a      	str	r2, [r5, #0]
 8002214:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002218:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800221c:	2301      	movs	r3, #1
 800221e:	e0a4      	b.n	800236a <_printf_i+0x1f6>
 8002220:	6820      	ldr	r0, [r4, #0]
 8002222:	6829      	ldr	r1, [r5, #0]
 8002224:	0606      	lsls	r6, r0, #24
 8002226:	f101 0304 	add.w	r3, r1, #4
 800222a:	d50a      	bpl.n	8002242 <_printf_i+0xce>
 800222c:	680e      	ldr	r6, [r1, #0]
 800222e:	602b      	str	r3, [r5, #0]
 8002230:	2e00      	cmp	r6, #0
 8002232:	da03      	bge.n	800223c <_printf_i+0xc8>
 8002234:	232d      	movs	r3, #45	; 0x2d
 8002236:	4276      	negs	r6, r6
 8002238:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800223c:	230a      	movs	r3, #10
 800223e:	485e      	ldr	r0, [pc, #376]	; (80023b8 <_printf_i+0x244>)
 8002240:	e019      	b.n	8002276 <_printf_i+0x102>
 8002242:	680e      	ldr	r6, [r1, #0]
 8002244:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002248:	602b      	str	r3, [r5, #0]
 800224a:	bf18      	it	ne
 800224c:	b236      	sxthne	r6, r6
 800224e:	e7ef      	b.n	8002230 <_printf_i+0xbc>
 8002250:	682b      	ldr	r3, [r5, #0]
 8002252:	6820      	ldr	r0, [r4, #0]
 8002254:	1d19      	adds	r1, r3, #4
 8002256:	6029      	str	r1, [r5, #0]
 8002258:	0601      	lsls	r1, r0, #24
 800225a:	d501      	bpl.n	8002260 <_printf_i+0xec>
 800225c:	681e      	ldr	r6, [r3, #0]
 800225e:	e002      	b.n	8002266 <_printf_i+0xf2>
 8002260:	0646      	lsls	r6, r0, #25
 8002262:	d5fb      	bpl.n	800225c <_printf_i+0xe8>
 8002264:	881e      	ldrh	r6, [r3, #0]
 8002266:	2f6f      	cmp	r7, #111	; 0x6f
 8002268:	bf0c      	ite	eq
 800226a:	2308      	moveq	r3, #8
 800226c:	230a      	movne	r3, #10
 800226e:	4852      	ldr	r0, [pc, #328]	; (80023b8 <_printf_i+0x244>)
 8002270:	2100      	movs	r1, #0
 8002272:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002276:	6865      	ldr	r5, [r4, #4]
 8002278:	2d00      	cmp	r5, #0
 800227a:	bfa8      	it	ge
 800227c:	6821      	ldrge	r1, [r4, #0]
 800227e:	60a5      	str	r5, [r4, #8]
 8002280:	bfa4      	itt	ge
 8002282:	f021 0104 	bicge.w	r1, r1, #4
 8002286:	6021      	strge	r1, [r4, #0]
 8002288:	b90e      	cbnz	r6, 800228e <_printf_i+0x11a>
 800228a:	2d00      	cmp	r5, #0
 800228c:	d04d      	beq.n	800232a <_printf_i+0x1b6>
 800228e:	4615      	mov	r5, r2
 8002290:	fbb6 f1f3 	udiv	r1, r6, r3
 8002294:	fb03 6711 	mls	r7, r3, r1, r6
 8002298:	5dc7      	ldrb	r7, [r0, r7]
 800229a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800229e:	4637      	mov	r7, r6
 80022a0:	42bb      	cmp	r3, r7
 80022a2:	460e      	mov	r6, r1
 80022a4:	d9f4      	bls.n	8002290 <_printf_i+0x11c>
 80022a6:	2b08      	cmp	r3, #8
 80022a8:	d10b      	bne.n	80022c2 <_printf_i+0x14e>
 80022aa:	6823      	ldr	r3, [r4, #0]
 80022ac:	07de      	lsls	r6, r3, #31
 80022ae:	d508      	bpl.n	80022c2 <_printf_i+0x14e>
 80022b0:	6923      	ldr	r3, [r4, #16]
 80022b2:	6861      	ldr	r1, [r4, #4]
 80022b4:	4299      	cmp	r1, r3
 80022b6:	bfde      	ittt	le
 80022b8:	2330      	movle	r3, #48	; 0x30
 80022ba:	f805 3c01 	strble.w	r3, [r5, #-1]
 80022be:	f105 35ff 	addle.w	r5, r5, #4294967295
 80022c2:	1b52      	subs	r2, r2, r5
 80022c4:	6122      	str	r2, [r4, #16]
 80022c6:	464b      	mov	r3, r9
 80022c8:	4621      	mov	r1, r4
 80022ca:	4640      	mov	r0, r8
 80022cc:	f8cd a000 	str.w	sl, [sp]
 80022d0:	aa03      	add	r2, sp, #12
 80022d2:	f7ff fedf 	bl	8002094 <_printf_common>
 80022d6:	3001      	adds	r0, #1
 80022d8:	d14c      	bne.n	8002374 <_printf_i+0x200>
 80022da:	f04f 30ff 	mov.w	r0, #4294967295
 80022de:	b004      	add	sp, #16
 80022e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022e4:	4834      	ldr	r0, [pc, #208]	; (80023b8 <_printf_i+0x244>)
 80022e6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80022ea:	6829      	ldr	r1, [r5, #0]
 80022ec:	6823      	ldr	r3, [r4, #0]
 80022ee:	f851 6b04 	ldr.w	r6, [r1], #4
 80022f2:	6029      	str	r1, [r5, #0]
 80022f4:	061d      	lsls	r5, r3, #24
 80022f6:	d514      	bpl.n	8002322 <_printf_i+0x1ae>
 80022f8:	07df      	lsls	r7, r3, #31
 80022fa:	bf44      	itt	mi
 80022fc:	f043 0320 	orrmi.w	r3, r3, #32
 8002300:	6023      	strmi	r3, [r4, #0]
 8002302:	b91e      	cbnz	r6, 800230c <_printf_i+0x198>
 8002304:	6823      	ldr	r3, [r4, #0]
 8002306:	f023 0320 	bic.w	r3, r3, #32
 800230a:	6023      	str	r3, [r4, #0]
 800230c:	2310      	movs	r3, #16
 800230e:	e7af      	b.n	8002270 <_printf_i+0xfc>
 8002310:	6823      	ldr	r3, [r4, #0]
 8002312:	f043 0320 	orr.w	r3, r3, #32
 8002316:	6023      	str	r3, [r4, #0]
 8002318:	2378      	movs	r3, #120	; 0x78
 800231a:	4828      	ldr	r0, [pc, #160]	; (80023bc <_printf_i+0x248>)
 800231c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002320:	e7e3      	b.n	80022ea <_printf_i+0x176>
 8002322:	0659      	lsls	r1, r3, #25
 8002324:	bf48      	it	mi
 8002326:	b2b6      	uxthmi	r6, r6
 8002328:	e7e6      	b.n	80022f8 <_printf_i+0x184>
 800232a:	4615      	mov	r5, r2
 800232c:	e7bb      	b.n	80022a6 <_printf_i+0x132>
 800232e:	682b      	ldr	r3, [r5, #0]
 8002330:	6826      	ldr	r6, [r4, #0]
 8002332:	1d18      	adds	r0, r3, #4
 8002334:	6961      	ldr	r1, [r4, #20]
 8002336:	6028      	str	r0, [r5, #0]
 8002338:	0635      	lsls	r5, r6, #24
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	d501      	bpl.n	8002342 <_printf_i+0x1ce>
 800233e:	6019      	str	r1, [r3, #0]
 8002340:	e002      	b.n	8002348 <_printf_i+0x1d4>
 8002342:	0670      	lsls	r0, r6, #25
 8002344:	d5fb      	bpl.n	800233e <_printf_i+0x1ca>
 8002346:	8019      	strh	r1, [r3, #0]
 8002348:	2300      	movs	r3, #0
 800234a:	4615      	mov	r5, r2
 800234c:	6123      	str	r3, [r4, #16]
 800234e:	e7ba      	b.n	80022c6 <_printf_i+0x152>
 8002350:	682b      	ldr	r3, [r5, #0]
 8002352:	2100      	movs	r1, #0
 8002354:	1d1a      	adds	r2, r3, #4
 8002356:	602a      	str	r2, [r5, #0]
 8002358:	681d      	ldr	r5, [r3, #0]
 800235a:	6862      	ldr	r2, [r4, #4]
 800235c:	4628      	mov	r0, r5
 800235e:	f000 f82f 	bl	80023c0 <memchr>
 8002362:	b108      	cbz	r0, 8002368 <_printf_i+0x1f4>
 8002364:	1b40      	subs	r0, r0, r5
 8002366:	6060      	str	r0, [r4, #4]
 8002368:	6863      	ldr	r3, [r4, #4]
 800236a:	6123      	str	r3, [r4, #16]
 800236c:	2300      	movs	r3, #0
 800236e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002372:	e7a8      	b.n	80022c6 <_printf_i+0x152>
 8002374:	462a      	mov	r2, r5
 8002376:	4649      	mov	r1, r9
 8002378:	4640      	mov	r0, r8
 800237a:	6923      	ldr	r3, [r4, #16]
 800237c:	47d0      	blx	sl
 800237e:	3001      	adds	r0, #1
 8002380:	d0ab      	beq.n	80022da <_printf_i+0x166>
 8002382:	6823      	ldr	r3, [r4, #0]
 8002384:	079b      	lsls	r3, r3, #30
 8002386:	d413      	bmi.n	80023b0 <_printf_i+0x23c>
 8002388:	68e0      	ldr	r0, [r4, #12]
 800238a:	9b03      	ldr	r3, [sp, #12]
 800238c:	4298      	cmp	r0, r3
 800238e:	bfb8      	it	lt
 8002390:	4618      	movlt	r0, r3
 8002392:	e7a4      	b.n	80022de <_printf_i+0x16a>
 8002394:	2301      	movs	r3, #1
 8002396:	4632      	mov	r2, r6
 8002398:	4649      	mov	r1, r9
 800239a:	4640      	mov	r0, r8
 800239c:	47d0      	blx	sl
 800239e:	3001      	adds	r0, #1
 80023a0:	d09b      	beq.n	80022da <_printf_i+0x166>
 80023a2:	3501      	adds	r5, #1
 80023a4:	68e3      	ldr	r3, [r4, #12]
 80023a6:	9903      	ldr	r1, [sp, #12]
 80023a8:	1a5b      	subs	r3, r3, r1
 80023aa:	42ab      	cmp	r3, r5
 80023ac:	dcf2      	bgt.n	8002394 <_printf_i+0x220>
 80023ae:	e7eb      	b.n	8002388 <_printf_i+0x214>
 80023b0:	2500      	movs	r5, #0
 80023b2:	f104 0619 	add.w	r6, r4, #25
 80023b6:	e7f5      	b.n	80023a4 <_printf_i+0x230>
 80023b8:	080026f3 	.word	0x080026f3
 80023bc:	08002704 	.word	0x08002704

080023c0 <memchr>:
 80023c0:	4603      	mov	r3, r0
 80023c2:	b510      	push	{r4, lr}
 80023c4:	b2c9      	uxtb	r1, r1
 80023c6:	4402      	add	r2, r0
 80023c8:	4293      	cmp	r3, r2
 80023ca:	4618      	mov	r0, r3
 80023cc:	d101      	bne.n	80023d2 <memchr+0x12>
 80023ce:	2000      	movs	r0, #0
 80023d0:	e003      	b.n	80023da <memchr+0x1a>
 80023d2:	7804      	ldrb	r4, [r0, #0]
 80023d4:	3301      	adds	r3, #1
 80023d6:	428c      	cmp	r4, r1
 80023d8:	d1f6      	bne.n	80023c8 <memchr+0x8>
 80023da:	bd10      	pop	{r4, pc}

080023dc <memcpy>:
 80023dc:	440a      	add	r2, r1
 80023de:	4291      	cmp	r1, r2
 80023e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80023e4:	d100      	bne.n	80023e8 <memcpy+0xc>
 80023e6:	4770      	bx	lr
 80023e8:	b510      	push	{r4, lr}
 80023ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80023ee:	4291      	cmp	r1, r2
 80023f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80023f4:	d1f9      	bne.n	80023ea <memcpy+0xe>
 80023f6:	bd10      	pop	{r4, pc}

080023f8 <memmove>:
 80023f8:	4288      	cmp	r0, r1
 80023fa:	b510      	push	{r4, lr}
 80023fc:	eb01 0402 	add.w	r4, r1, r2
 8002400:	d902      	bls.n	8002408 <memmove+0x10>
 8002402:	4284      	cmp	r4, r0
 8002404:	4623      	mov	r3, r4
 8002406:	d807      	bhi.n	8002418 <memmove+0x20>
 8002408:	1e43      	subs	r3, r0, #1
 800240a:	42a1      	cmp	r1, r4
 800240c:	d008      	beq.n	8002420 <memmove+0x28>
 800240e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002412:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002416:	e7f8      	b.n	800240a <memmove+0x12>
 8002418:	4601      	mov	r1, r0
 800241a:	4402      	add	r2, r0
 800241c:	428a      	cmp	r2, r1
 800241e:	d100      	bne.n	8002422 <memmove+0x2a>
 8002420:	bd10      	pop	{r4, pc}
 8002422:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002426:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800242a:	e7f7      	b.n	800241c <memmove+0x24>

0800242c <_free_r>:
 800242c:	b538      	push	{r3, r4, r5, lr}
 800242e:	4605      	mov	r5, r0
 8002430:	2900      	cmp	r1, #0
 8002432:	d040      	beq.n	80024b6 <_free_r+0x8a>
 8002434:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002438:	1f0c      	subs	r4, r1, #4
 800243a:	2b00      	cmp	r3, #0
 800243c:	bfb8      	it	lt
 800243e:	18e4      	addlt	r4, r4, r3
 8002440:	f000 f910 	bl	8002664 <__malloc_lock>
 8002444:	4a1c      	ldr	r2, [pc, #112]	; (80024b8 <_free_r+0x8c>)
 8002446:	6813      	ldr	r3, [r2, #0]
 8002448:	b933      	cbnz	r3, 8002458 <_free_r+0x2c>
 800244a:	6063      	str	r3, [r4, #4]
 800244c:	6014      	str	r4, [r2, #0]
 800244e:	4628      	mov	r0, r5
 8002450:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002454:	f000 b90c 	b.w	8002670 <__malloc_unlock>
 8002458:	42a3      	cmp	r3, r4
 800245a:	d908      	bls.n	800246e <_free_r+0x42>
 800245c:	6820      	ldr	r0, [r4, #0]
 800245e:	1821      	adds	r1, r4, r0
 8002460:	428b      	cmp	r3, r1
 8002462:	bf01      	itttt	eq
 8002464:	6819      	ldreq	r1, [r3, #0]
 8002466:	685b      	ldreq	r3, [r3, #4]
 8002468:	1809      	addeq	r1, r1, r0
 800246a:	6021      	streq	r1, [r4, #0]
 800246c:	e7ed      	b.n	800244a <_free_r+0x1e>
 800246e:	461a      	mov	r2, r3
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	b10b      	cbz	r3, 8002478 <_free_r+0x4c>
 8002474:	42a3      	cmp	r3, r4
 8002476:	d9fa      	bls.n	800246e <_free_r+0x42>
 8002478:	6811      	ldr	r1, [r2, #0]
 800247a:	1850      	adds	r0, r2, r1
 800247c:	42a0      	cmp	r0, r4
 800247e:	d10b      	bne.n	8002498 <_free_r+0x6c>
 8002480:	6820      	ldr	r0, [r4, #0]
 8002482:	4401      	add	r1, r0
 8002484:	1850      	adds	r0, r2, r1
 8002486:	4283      	cmp	r3, r0
 8002488:	6011      	str	r1, [r2, #0]
 800248a:	d1e0      	bne.n	800244e <_free_r+0x22>
 800248c:	6818      	ldr	r0, [r3, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	4401      	add	r1, r0
 8002492:	6011      	str	r1, [r2, #0]
 8002494:	6053      	str	r3, [r2, #4]
 8002496:	e7da      	b.n	800244e <_free_r+0x22>
 8002498:	d902      	bls.n	80024a0 <_free_r+0x74>
 800249a:	230c      	movs	r3, #12
 800249c:	602b      	str	r3, [r5, #0]
 800249e:	e7d6      	b.n	800244e <_free_r+0x22>
 80024a0:	6820      	ldr	r0, [r4, #0]
 80024a2:	1821      	adds	r1, r4, r0
 80024a4:	428b      	cmp	r3, r1
 80024a6:	bf01      	itttt	eq
 80024a8:	6819      	ldreq	r1, [r3, #0]
 80024aa:	685b      	ldreq	r3, [r3, #4]
 80024ac:	1809      	addeq	r1, r1, r0
 80024ae:	6021      	streq	r1, [r4, #0]
 80024b0:	6063      	str	r3, [r4, #4]
 80024b2:	6054      	str	r4, [r2, #4]
 80024b4:	e7cb      	b.n	800244e <_free_r+0x22>
 80024b6:	bd38      	pop	{r3, r4, r5, pc}
 80024b8:	20000114 	.word	0x20000114

080024bc <sbrk_aligned>:
 80024bc:	b570      	push	{r4, r5, r6, lr}
 80024be:	4e0e      	ldr	r6, [pc, #56]	; (80024f8 <sbrk_aligned+0x3c>)
 80024c0:	460c      	mov	r4, r1
 80024c2:	6831      	ldr	r1, [r6, #0]
 80024c4:	4605      	mov	r5, r0
 80024c6:	b911      	cbnz	r1, 80024ce <sbrk_aligned+0x12>
 80024c8:	f000 f8bc 	bl	8002644 <_sbrk_r>
 80024cc:	6030      	str	r0, [r6, #0]
 80024ce:	4621      	mov	r1, r4
 80024d0:	4628      	mov	r0, r5
 80024d2:	f000 f8b7 	bl	8002644 <_sbrk_r>
 80024d6:	1c43      	adds	r3, r0, #1
 80024d8:	d00a      	beq.n	80024f0 <sbrk_aligned+0x34>
 80024da:	1cc4      	adds	r4, r0, #3
 80024dc:	f024 0403 	bic.w	r4, r4, #3
 80024e0:	42a0      	cmp	r0, r4
 80024e2:	d007      	beq.n	80024f4 <sbrk_aligned+0x38>
 80024e4:	1a21      	subs	r1, r4, r0
 80024e6:	4628      	mov	r0, r5
 80024e8:	f000 f8ac 	bl	8002644 <_sbrk_r>
 80024ec:	3001      	adds	r0, #1
 80024ee:	d101      	bne.n	80024f4 <sbrk_aligned+0x38>
 80024f0:	f04f 34ff 	mov.w	r4, #4294967295
 80024f4:	4620      	mov	r0, r4
 80024f6:	bd70      	pop	{r4, r5, r6, pc}
 80024f8:	20000118 	.word	0x20000118

080024fc <_malloc_r>:
 80024fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002500:	1ccd      	adds	r5, r1, #3
 8002502:	f025 0503 	bic.w	r5, r5, #3
 8002506:	3508      	adds	r5, #8
 8002508:	2d0c      	cmp	r5, #12
 800250a:	bf38      	it	cc
 800250c:	250c      	movcc	r5, #12
 800250e:	2d00      	cmp	r5, #0
 8002510:	4607      	mov	r7, r0
 8002512:	db01      	blt.n	8002518 <_malloc_r+0x1c>
 8002514:	42a9      	cmp	r1, r5
 8002516:	d905      	bls.n	8002524 <_malloc_r+0x28>
 8002518:	230c      	movs	r3, #12
 800251a:	2600      	movs	r6, #0
 800251c:	603b      	str	r3, [r7, #0]
 800251e:	4630      	mov	r0, r6
 8002520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002524:	4e2e      	ldr	r6, [pc, #184]	; (80025e0 <_malloc_r+0xe4>)
 8002526:	f000 f89d 	bl	8002664 <__malloc_lock>
 800252a:	6833      	ldr	r3, [r6, #0]
 800252c:	461c      	mov	r4, r3
 800252e:	bb34      	cbnz	r4, 800257e <_malloc_r+0x82>
 8002530:	4629      	mov	r1, r5
 8002532:	4638      	mov	r0, r7
 8002534:	f7ff ffc2 	bl	80024bc <sbrk_aligned>
 8002538:	1c43      	adds	r3, r0, #1
 800253a:	4604      	mov	r4, r0
 800253c:	d14d      	bne.n	80025da <_malloc_r+0xde>
 800253e:	6834      	ldr	r4, [r6, #0]
 8002540:	4626      	mov	r6, r4
 8002542:	2e00      	cmp	r6, #0
 8002544:	d140      	bne.n	80025c8 <_malloc_r+0xcc>
 8002546:	6823      	ldr	r3, [r4, #0]
 8002548:	4631      	mov	r1, r6
 800254a:	4638      	mov	r0, r7
 800254c:	eb04 0803 	add.w	r8, r4, r3
 8002550:	f000 f878 	bl	8002644 <_sbrk_r>
 8002554:	4580      	cmp	r8, r0
 8002556:	d13a      	bne.n	80025ce <_malloc_r+0xd2>
 8002558:	6821      	ldr	r1, [r4, #0]
 800255a:	3503      	adds	r5, #3
 800255c:	1a6d      	subs	r5, r5, r1
 800255e:	f025 0503 	bic.w	r5, r5, #3
 8002562:	3508      	adds	r5, #8
 8002564:	2d0c      	cmp	r5, #12
 8002566:	bf38      	it	cc
 8002568:	250c      	movcc	r5, #12
 800256a:	4638      	mov	r0, r7
 800256c:	4629      	mov	r1, r5
 800256e:	f7ff ffa5 	bl	80024bc <sbrk_aligned>
 8002572:	3001      	adds	r0, #1
 8002574:	d02b      	beq.n	80025ce <_malloc_r+0xd2>
 8002576:	6823      	ldr	r3, [r4, #0]
 8002578:	442b      	add	r3, r5
 800257a:	6023      	str	r3, [r4, #0]
 800257c:	e00e      	b.n	800259c <_malloc_r+0xa0>
 800257e:	6822      	ldr	r2, [r4, #0]
 8002580:	1b52      	subs	r2, r2, r5
 8002582:	d41e      	bmi.n	80025c2 <_malloc_r+0xc6>
 8002584:	2a0b      	cmp	r2, #11
 8002586:	d916      	bls.n	80025b6 <_malloc_r+0xba>
 8002588:	1961      	adds	r1, r4, r5
 800258a:	42a3      	cmp	r3, r4
 800258c:	6025      	str	r5, [r4, #0]
 800258e:	bf18      	it	ne
 8002590:	6059      	strne	r1, [r3, #4]
 8002592:	6863      	ldr	r3, [r4, #4]
 8002594:	bf08      	it	eq
 8002596:	6031      	streq	r1, [r6, #0]
 8002598:	5162      	str	r2, [r4, r5]
 800259a:	604b      	str	r3, [r1, #4]
 800259c:	4638      	mov	r0, r7
 800259e:	f104 060b 	add.w	r6, r4, #11
 80025a2:	f000 f865 	bl	8002670 <__malloc_unlock>
 80025a6:	f026 0607 	bic.w	r6, r6, #7
 80025aa:	1d23      	adds	r3, r4, #4
 80025ac:	1af2      	subs	r2, r6, r3
 80025ae:	d0b6      	beq.n	800251e <_malloc_r+0x22>
 80025b0:	1b9b      	subs	r3, r3, r6
 80025b2:	50a3      	str	r3, [r4, r2]
 80025b4:	e7b3      	b.n	800251e <_malloc_r+0x22>
 80025b6:	6862      	ldr	r2, [r4, #4]
 80025b8:	42a3      	cmp	r3, r4
 80025ba:	bf0c      	ite	eq
 80025bc:	6032      	streq	r2, [r6, #0]
 80025be:	605a      	strne	r2, [r3, #4]
 80025c0:	e7ec      	b.n	800259c <_malloc_r+0xa0>
 80025c2:	4623      	mov	r3, r4
 80025c4:	6864      	ldr	r4, [r4, #4]
 80025c6:	e7b2      	b.n	800252e <_malloc_r+0x32>
 80025c8:	4634      	mov	r4, r6
 80025ca:	6876      	ldr	r6, [r6, #4]
 80025cc:	e7b9      	b.n	8002542 <_malloc_r+0x46>
 80025ce:	230c      	movs	r3, #12
 80025d0:	4638      	mov	r0, r7
 80025d2:	603b      	str	r3, [r7, #0]
 80025d4:	f000 f84c 	bl	8002670 <__malloc_unlock>
 80025d8:	e7a1      	b.n	800251e <_malloc_r+0x22>
 80025da:	6025      	str	r5, [r4, #0]
 80025dc:	e7de      	b.n	800259c <_malloc_r+0xa0>
 80025de:	bf00      	nop
 80025e0:	20000114 	.word	0x20000114

080025e4 <_realloc_r>:
 80025e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025e8:	4680      	mov	r8, r0
 80025ea:	4614      	mov	r4, r2
 80025ec:	460e      	mov	r6, r1
 80025ee:	b921      	cbnz	r1, 80025fa <_realloc_r+0x16>
 80025f0:	4611      	mov	r1, r2
 80025f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80025f6:	f7ff bf81 	b.w	80024fc <_malloc_r>
 80025fa:	b92a      	cbnz	r2, 8002608 <_realloc_r+0x24>
 80025fc:	f7ff ff16 	bl	800242c <_free_r>
 8002600:	4625      	mov	r5, r4
 8002602:	4628      	mov	r0, r5
 8002604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002608:	f000 f838 	bl	800267c <_malloc_usable_size_r>
 800260c:	4284      	cmp	r4, r0
 800260e:	4607      	mov	r7, r0
 8002610:	d802      	bhi.n	8002618 <_realloc_r+0x34>
 8002612:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002616:	d812      	bhi.n	800263e <_realloc_r+0x5a>
 8002618:	4621      	mov	r1, r4
 800261a:	4640      	mov	r0, r8
 800261c:	f7ff ff6e 	bl	80024fc <_malloc_r>
 8002620:	4605      	mov	r5, r0
 8002622:	2800      	cmp	r0, #0
 8002624:	d0ed      	beq.n	8002602 <_realloc_r+0x1e>
 8002626:	42bc      	cmp	r4, r7
 8002628:	4622      	mov	r2, r4
 800262a:	4631      	mov	r1, r6
 800262c:	bf28      	it	cs
 800262e:	463a      	movcs	r2, r7
 8002630:	f7ff fed4 	bl	80023dc <memcpy>
 8002634:	4631      	mov	r1, r6
 8002636:	4640      	mov	r0, r8
 8002638:	f7ff fef8 	bl	800242c <_free_r>
 800263c:	e7e1      	b.n	8002602 <_realloc_r+0x1e>
 800263e:	4635      	mov	r5, r6
 8002640:	e7df      	b.n	8002602 <_realloc_r+0x1e>
	...

08002644 <_sbrk_r>:
 8002644:	b538      	push	{r3, r4, r5, lr}
 8002646:	2300      	movs	r3, #0
 8002648:	4d05      	ldr	r5, [pc, #20]	; (8002660 <_sbrk_r+0x1c>)
 800264a:	4604      	mov	r4, r0
 800264c:	4608      	mov	r0, r1
 800264e:	602b      	str	r3, [r5, #0]
 8002650:	f7fe f9fc 	bl	8000a4c <_sbrk>
 8002654:	1c43      	adds	r3, r0, #1
 8002656:	d102      	bne.n	800265e <_sbrk_r+0x1a>
 8002658:	682b      	ldr	r3, [r5, #0]
 800265a:	b103      	cbz	r3, 800265e <_sbrk_r+0x1a>
 800265c:	6023      	str	r3, [r4, #0]
 800265e:	bd38      	pop	{r3, r4, r5, pc}
 8002660:	2000011c 	.word	0x2000011c

08002664 <__malloc_lock>:
 8002664:	4801      	ldr	r0, [pc, #4]	; (800266c <__malloc_lock+0x8>)
 8002666:	f000 b811 	b.w	800268c <__retarget_lock_acquire_recursive>
 800266a:	bf00      	nop
 800266c:	20000120 	.word	0x20000120

08002670 <__malloc_unlock>:
 8002670:	4801      	ldr	r0, [pc, #4]	; (8002678 <__malloc_unlock+0x8>)
 8002672:	f000 b80c 	b.w	800268e <__retarget_lock_release_recursive>
 8002676:	bf00      	nop
 8002678:	20000120 	.word	0x20000120

0800267c <_malloc_usable_size_r>:
 800267c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002680:	1f18      	subs	r0, r3, #4
 8002682:	2b00      	cmp	r3, #0
 8002684:	bfbc      	itt	lt
 8002686:	580b      	ldrlt	r3, [r1, r0]
 8002688:	18c0      	addlt	r0, r0, r3
 800268a:	4770      	bx	lr

0800268c <__retarget_lock_acquire_recursive>:
 800268c:	4770      	bx	lr

0800268e <__retarget_lock_release_recursive>:
 800268e:	4770      	bx	lr

08002690 <_init>:
 8002690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002692:	bf00      	nop
 8002694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002696:	bc08      	pop	{r3}
 8002698:	469e      	mov	lr, r3
 800269a:	4770      	bx	lr

0800269c <_fini>:
 800269c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800269e:	bf00      	nop
 80026a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026a2:	bc08      	pop	{r3}
 80026a4:	469e      	mov	lr, r3
 80026a6:	4770      	bx	lr
